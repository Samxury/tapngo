{
  "address": "0x75c4D11F142bB29996B11533e6EF9f741c45De7C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vendorRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ensRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ensResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "RegistrationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "subname",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SubnameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "subname",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SubnameRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "subname",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "SubnameTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TAPNGO_NODE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensRegistry",
      "outputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensResolver",
      "outputs": [
        {
          "internalType": "contract ENSResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "subname",
          "type": "string"
        }
      ],
      "name": "getSubnameOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getSubnamesByOwner",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "subnames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "subname",
          "type": "string"
        }
      ],
      "name": "isSubnameRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerToSubnames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "subname",
          "type": "string"
        }
      ],
      "name": "registerSubname",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "subname",
          "type": "string"
        }
      ],
      "name": "revokeSubname",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "subnameExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "subnameToOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "subname",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferSubname",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "updateRegistrationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newResolver",
          "type": "address"
        }
      ],
      "name": "updateResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vendorRegistry",
      "outputs": [
        {
          "internalType": "contract VendorRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2d54b7b470852caa2a522f0131c32cb639943a98caf4bb2269f46f3adf006574",
  "receipt": {
    "to": null,
    "from": "0xBab2d51d46042098690a9767339d7603C9F737C1",
    "contractAddress": "0x75c4D11F142bB29996B11533e6EF9f741c45De7C",
    "transactionIndex": 34,
    "gasUsed": "2169121",
    "logsBloom": "0x
    "blockHash": "0x4786a4e9acf109f59f3db0101bc0ba43a663aef8a32e7e17841fc69e0281f63e",
    "transactionHash": "0x2d54b7b470852caa2a522f0131c32cb639943a98caf4bb2269f46f3adf006574",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 30637631,
        "transactionHash": "0x2d54b7b470852caa2a522f0131c32cb639943a98caf4bb2269f46f3adf006574",
        "address": "0x75c4D11F142bB29996B11533e6EF9f741c45De7C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bab2d51d46042098690a9767339d7603c9f737c1"
        ],
        "data": "0x",
        "logIndex": 190,
        "blockHash": "0x4786a4e9acf109f59f3db0101bc0ba43a663aef8a32e7e17841fc69e0281f63e"
      }
    ],
    "blockNumber": 30637631,
    "cumulativeGasUsed": "9681779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA9F04F020CF9F511982719196E25FE7c666c9E4D",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41"
  ],
  "numDeployments": 1,
  "solcInputHash": "1e7f658a624141603997a4c1dbf9231d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vendorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"RegistrationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"subname\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SubnameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"subname\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubnameRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"subname\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SubnameTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAPNGO_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensResolver\",\"outputs\":[{\"internalType\":\"contract ENSResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"subname\",\"type\":\"string\"}],\"name\":\"getSubnameOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSubnamesByOwner\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"subnames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"subname\",\"type\":\"string\"}],\"name\":\"isSubnameRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerToSubnames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"subname\",\"type\":\"string\"}],\"name\":\"registerSubname\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"subname\",\"type\":\"string\"}],\"name\":\"revokeSubname\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"subnameExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"subnameToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"subname\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSubname\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateRegistrationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vendorRegistry\",\"outputs\":[{\"internalType\":\"contract VendorRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Manages ENS subnames under .tapngo.eth for verified vendors This contract issues subnames only to vendors registered in VendorRegistry\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"getSubnameOwner(string)\":{\"details\":\"Get owner of a subname\",\"params\":{\"subname\":\"Subname to query\"},\"returns\":{\"owner\":\"Address of the subname owner\"}},\"getSubnamesByOwner(address)\":{\"details\":\"Get all subnames owned by an address\",\"params\":{\"owner\":\"Address to query\"},\"returns\":{\"subnames\":\"Array of subnames owned by the address\"}},\"isSubnameRegistered(string)\":{\"details\":\"Check if a subname exists\",\"params\":{\"subname\":\"Subname to check\"},\"returns\":{\"exists\":\"True if subname exists\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the contract (admin only)\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerSubname(string)\":{\"details\":\"Register a new ENS subname for a vendor\",\"params\":{\"subname\":\"The subname to register (e.g., \\\"business\\\" for business.tapngo.eth)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeSubname(string)\":{\"details\":\"Revoke a subname (admin only)\",\"params\":{\"subname\":\"The subname to revoke\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferSubname(string,address)\":{\"details\":\"Transfer ownership of a subname to another address\",\"params\":{\"newOwner\":\"The new owner address\",\"subname\":\"The subname to transfer\"}},\"unpause()\":{\"details\":\"Unpause the contract (admin only)\"},\"updateRegistrationFee(uint256)\":{\"details\":\"Update registration fee (admin only)\",\"params\":{\"newFee\":\"New registration fee in wei\"}},\"updateResolver(address)\":{\"details\":\"Update ENS resolver address (admin only)\",\"params\":{\"newResolver\":\"New resolver address\"}},\"withdrawFees()\":{\"details\":\"Withdraw collected fees (admin only)\"}},\"title\":\"SubnameRegistrar\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SubnameRegistrar.sol\":\"SubnameRegistrar\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"contracts/SubnameRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"./VendorRegistry.sol\\\";\\r\\n\\r\\n// ENS Registry interface (simplified for Base Sepolia)\\r\\n// In a real implementation, you would import the actual ENS interfaces\\r\\ninterface ENSRegistry {\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n    \\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n    function setAddr(bytes32 node, address a) external;\\r\\n}\\r\\n\\r\\n// ENS Resolver interface (simplified)\\r\\ninterface ENSResolver {\\r\\n    function setAddr(bytes32 node, address a) external;\\r\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SubnameRegistrar\\r\\n * @dev Manages ENS subnames under .tapngo.eth for verified vendors\\r\\n * This contract issues subnames only to vendors registered in VendorRegistry\\r\\n */\\r\\ncontract SubnameRegistrar is Ownable, Pausable {\\r\\n    \\r\\n    // State variables\\r\\n    VendorRegistry public vendorRegistry;\\r\\n    ENSRegistry public ensRegistry;\\r\\n    ENSResolver public ensResolver;\\r\\n    \\r\\n    // ENS node for .tapngo.eth (this would be the actual node hash in production)\\r\\n    bytes32 public constant TAPNGO_NODE = keccak256(abi.encodePacked(bytes32(0), keccak256(\\\"tapngo\\\")));\\r\\n    \\r\\n    // Mapping to track registered subnames\\r\\n    mapping(string => address) public subnameToOwner; // subname -> owner address\\r\\n    mapping(address => string[]) public ownerToSubnames; // owner -> array of subnames\\r\\n    mapping(string => bool) public subnameExists; // subname -> exists\\r\\n    \\r\\n    // Subname registration fee (in wei)\\r\\n    uint256 public registrationFee = 0; // Free for now, can be set by admin\\r\\n    \\r\\n    // Events\\r\\n    event SubnameRegistered(\\r\\n        string indexed subname,\\r\\n        address indexed owner,\\r\\n        address indexed vendor,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    \\r\\n    event SubnameTransferred(\\r\\n        string indexed subname,\\r\\n        address indexed oldOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    \\r\\n    event SubnameRevoked(string indexed subname, address indexed owner);\\r\\n    event RegistrationFeeUpdated(uint256 oldFee, uint256 newFee);\\r\\n    \\r\\n    // Modifiers\\r\\n    modifier onlyVendor() {\\r\\n        require(vendorRegistry.isVendor(msg.sender), \\\"SubnameRegistrar: Only registered vendors can register subnames\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyActiveVendor() {\\r\\n        require(vendorRegistry.isActiveVendor(msg.sender), \\\"SubnameRegistrar: Only active vendors can register subnames\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlySubnameOwner(string memory subname) {\\r\\n        require(subnameToOwner[subname] == msg.sender, \\\"SubnameRegistrar: Not the owner of this subname\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner(), \\\"SubnameRegistrar: Only admin can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(\\r\\n        address _vendorRegistry,\\r\\n        address _ensRegistry,\\r\\n        address _ensResolver\\r\\n    ) Ownable(msg.sender) {\\r\\n        vendorRegistry = VendorRegistry(_vendorRegistry);\\r\\n        ensRegistry = ENSRegistry(_ensRegistry);\\r\\n        ensResolver = ENSResolver(_ensResolver);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Register a new ENS subname for a vendor\\r\\n     * @param subname The subname to register (e.g., \\\"business\\\" for business.tapngo.eth)\\r\\n     */\\r\\n    function registerSubname(string memory subname) external payable onlyActiveVendor whenNotPaused {\\r\\n        require(bytes(subname).length > 0, \\\"SubnameRegistrar: Subname cannot be empty\\\");\\r\\n        require(!subnameExists[subname], \\\"SubnameRegistrar: Subname already exists\\\");\\r\\n        require(msg.value >= registrationFee, \\\"SubnameRegistrar: Insufficient registration fee\\\");\\r\\n        \\r\\n        // Get vendor profile to verify ENS name matches\\r\\n        VendorRegistry.VendorProfile memory profile = vendorRegistry.getVendorProfile(msg.sender);\\r\\n        require(bytes(profile.ensName).length > 0, \\\"SubnameRegistrar: Vendor must have ENS name set\\\");\\r\\n        \\r\\n        // Verify the subname matches the vendor's ENS name\\r\\n        string memory expectedSubname = _extractSubname(profile.ensName);\\r\\n        require(\\r\\n            keccak256(bytes(subname)) == keccak256(bytes(expectedSubname)),\\r\\n            \\\"SubnameRegistrar: Subname must match vendor's registered ENS name\\\"\\r\\n        );\\r\\n        \\r\\n        // Register the subname\\r\\n        subnameToOwner[subname] = msg.sender;\\r\\n        subnameExists[subname] = true;\\r\\n        ownerToSubnames[msg.sender].push(subname);\\r\\n        \\r\\n        // Register with ENS (simplified - in production you'd use actual ENS contracts)\\r\\n        bytes32 label = keccak256(bytes(subname));\\r\\n        ensRegistry.setSubnodeRecord(\\r\\n            TAPNGO_NODE,\\r\\n            label,\\r\\n            msg.sender,\\r\\n            address(ensResolver),\\r\\n            0 // TTL = 0 means use default\\r\\n        );\\r\\n        \\r\\n        // Set the address resolution\\r\\n        bytes32 node = keccak256(abi.encodePacked(TAPNGO_NODE, label));\\r\\n        ensResolver.setAddr(node, msg.sender);\\r\\n        \\r\\n        // Set text records for additional metadata\\r\\n        ensResolver.setText(node, \\\"description\\\", profile.businessName);\\r\\n        ensResolver.setText(node, \\\"url\\\", string(abi.encodePacked(\\\"https://tapngo.eth/\\\", subname)));\\r\\n        \\r\\n        emit SubnameRegistered(subname, msg.sender, msg.sender, block.timestamp);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Transfer ownership of a subname to another address\\r\\n     * @param subname The subname to transfer\\r\\n     * @param newOwner The new owner address\\r\\n     */\\r\\n    function transferSubname(string memory subname, address newOwner) external onlySubnameOwner(subname) {\\r\\n        require(newOwner != address(0), \\\"SubnameRegistrar: New owner cannot be zero address\\\");\\r\\n        require(newOwner != msg.sender, \\\"SubnameRegistrar: Cannot transfer to self\\\");\\r\\n        \\r\\n        address oldOwner = subnameToOwner[subname];\\r\\n        subnameToOwner[subname] = newOwner;\\r\\n        \\r\\n        // Update owner's subname list\\r\\n        _removeSubnameFromOwner(oldOwner, subname);\\r\\n        ownerToSubnames[newOwner].push(subname);\\r\\n        \\r\\n        // Update ENS record\\r\\n        bytes32 label = keccak256(bytes(subname));\\r\\n        bytes32 node = keccak256(abi.encodePacked(TAPNGO_NODE, label));\\r\\n        ensRegistry.setSubnodeRecord(\\r\\n            TAPNGO_NODE,\\r\\n            label,\\r\\n            newOwner,\\r\\n            address(ensResolver),\\r\\n            0\\r\\n        );\\r\\n        ensResolver.setAddr(node, newOwner);\\r\\n        \\r\\n        emit SubnameTransferred(subname, oldOwner, newOwner);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Revoke a subname (admin only)\\r\\n     * @param subname The subname to revoke\\r\\n     */\\r\\n    function revokeSubname(string memory subname) external onlyAdmin {\\r\\n        require(subnameExists[subname], \\\"SubnameRegistrar: Subname does not exist\\\");\\r\\n        \\r\\n        address owner = subnameToOwner[subname];\\r\\n        \\r\\n        // Remove from mappings\\r\\n        delete subnameToOwner[subname];\\r\\n        subnameExists[subname] = false;\\r\\n        _removeSubnameFromOwner(owner, subname);\\r\\n        \\r\\n        // Clear ENS record (set owner to zero address)\\r\\n        bytes32 label = keccak256(bytes(subname));\\r\\n        ensRegistry.setSubnodeRecord(\\r\\n            TAPNGO_NODE,\\r\\n            label,\\r\\n            address(0),\\r\\n            address(0),\\r\\n            0\\r\\n        );\\r\\n        \\r\\n        emit SubnameRevoked(subname, owner);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update ENS resolver address (admin only)\\r\\n     * @param newResolver New resolver address\\r\\n     */\\r\\n    function updateResolver(address newResolver) external onlyAdmin {\\r\\n        require(newResolver != address(0), \\\"SubnameRegistrar: Resolver cannot be zero address\\\");\\r\\n        ensResolver = ENSResolver(newResolver);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update registration fee (admin only)\\r\\n     * @param newFee New registration fee in wei\\r\\n     */\\r\\n    function updateRegistrationFee(uint256 newFee) external onlyAdmin {\\r\\n        uint256 oldFee = registrationFee;\\r\\n        registrationFee = newFee;\\r\\n        emit RegistrationFeeUpdated(oldFee, newFee);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all subnames owned by an address\\r\\n     * @param owner Address to query\\r\\n     * @return subnames Array of subnames owned by the address\\r\\n     */\\r\\n    function getSubnamesByOwner(address owner) external view returns (string[] memory subnames) {\\r\\n        return ownerToSubnames[owner];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if a subname exists\\r\\n     * @param subname Subname to check\\r\\n     * @return exists True if subname exists\\r\\n     */\\r\\n    function isSubnameRegistered(string memory subname) external view returns (bool exists) {\\r\\n        return subnameExists[subname];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get owner of a subname\\r\\n     * @param subname Subname to query\\r\\n     * @return owner Address of the subname owner\\r\\n     */\\r\\n    function getSubnameOwner(string memory subname) external view returns (address owner) {\\r\\n        return subnameToOwner[subname];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Extract subname from full ENS name\\r\\n     * @param ensName Full ENS name (e.g., \\\"business.tapngo.eth\\\")\\r\\n     * @return subname Just the subname part (e.g., \\\"business\\\")\\r\\n     */\\r\\n    function _extractSubname(string memory ensName) internal pure returns (string memory subname) {\\r\\n        bytes memory ensBytes = bytes(ensName);\\r\\n        uint256 dotIndex = 0;\\r\\n        \\r\\n        // Find the first dot\\r\\n        for (uint256 i = 0; i < ensBytes.length; i++) {\\r\\n            if (ensBytes[i] == '.') {\\r\\n                dotIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        require(dotIndex > 0, \\\"SubnameRegistrar: Invalid ENS name format\\\");\\r\\n        \\r\\n        // Extract subname\\r\\n        bytes memory subnameBytes = new bytes(dotIndex);\\r\\n        for (uint256 i = 0; i < dotIndex; i++) {\\r\\n            subnameBytes[i] = ensBytes[i];\\r\\n        }\\r\\n        \\r\\n        return string(subnameBytes);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Remove subname from owner's list\\r\\n     * @param owner Owner address\\r\\n     * @param subname Subname to remove\\r\\n     */\\r\\n    function _removeSubnameFromOwner(address owner, string memory subname) internal {\\r\\n        string[] storage subnames = ownerToSubnames[owner];\\r\\n        for (uint256 i = 0; i < subnames.length; i++) {\\r\\n            if (keccak256(bytes(subnames[i])) == keccak256(bytes(subname))) {\\r\\n                subnames[i] = subnames[subnames.length - 1];\\r\\n                subnames.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Withdraw collected fees (admin only)\\r\\n     */\\r\\n    function withdrawFees() external onlyAdmin {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"SubnameRegistrar: No fees to withdraw\\\");\\r\\n        \\r\\n        (bool success, ) = payable(owner()).call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"SubnameRegistrar: Failed to withdraw fees\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pause the contract (admin only)\\r\\n     */\\r\\n    function pause() external onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Unpause the contract (admin only)\\r\\n     */\\r\\n    function unpause() external onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Receive function to accept ETH\\r\\n     */\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x9cf164b9feccd9f846d08e002160a180f3ba5c18763034ae4a76177befc09b46\",\"license\":\"MIT\"},\"contracts/VendorRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title VendorRegistry\\r\\n * @dev Registry for managing vendor profiles and verification status\\r\\n * Stores vendor information including ENS names, phone verification, EFP verification, and EFPas scores\\r\\n */\\r\\ncontract VendorRegistry is Ownable, Pausable {\\r\\n    // Vendor status enum\\r\\n    enum VendorStatus {\\r\\n        Pending,    // 0 - Vendor registered but not approved\\r\\n        Active,     // 1 - Vendor approved and active\\r\\n        Suspended,  // 2 - Vendor suspended by admin\\r\\n        Rejected    // 3 - Vendor registration rejected\\r\\n    }\\r\\n    \\r\\n    // Vendor profile structure\\r\\n    struct VendorProfile {\\r\\n        address wallet;           // Vendor's wallet address\\r\\n        string ensName;          // ENS subname (e.g., \\\"business.tapngo.eth\\\")\\r\\n        string businessName;     // Business display name\\r\\n        string phoneHash;        // Hashed phone number for verification\\r\\n        bool phoneVerified;      // Phone verification status\\r\\n        bool efpVerified;        // Ethereum Follow Protocol verification\\r\\n        uint256 efpasScore;      // EFPas reputation score (0 if not available)\\r\\n        VendorStatus status;     // Current vendor status\\r\\n        uint256 registrationTime; // Timestamp of registration\\r\\n        uint256 lastUpdated;     // Timestamp of last profile update\\r\\n    }\\r\\n    \\r\\n    // State variables\\r\\n    mapping(address => VendorProfile) public vendors;\\r\\n    mapping(string => address) public ensToVendor; // ENS name -> vendor address\\r\\n    mapping(string => bool) public usedPhoneHashes; // Track used phone hashes\\r\\n    address[] public vendorAddresses; // Array of all vendor addresses\\r\\n    \\r\\n    // Verification requirements\\r\\n    bool public requirePhoneVerification = true;\\r\\n    bool public requireEFPVerification = true;\\r\\n    uint256 public minEFPasScore = 0; // Minimum EFPas score required (0 = not required)\\r\\n    \\r\\n    // Events\\r\\n    event VendorRegistered(\\r\\n        address indexed vendor,\\r\\n        string ensName,\\r\\n        string businessName,\\r\\n        string phoneHash\\r\\n    );\\r\\n    \\r\\n    event VendorApproved(address indexed vendor, string ensName);\\r\\n    event VendorSuspended(address indexed vendor, string reason);\\r\\n    event VendorRejected(address indexed vendor, string reason);\\r\\n    event VendorUpdated(address indexed vendor, string field);\\r\\n    event PhoneVerified(address indexed vendor, string phoneHash);\\r\\n    event EFPVerified(address indexed vendor, bool verified);\\r\\n    event EFPasScoreUpdated(address indexed vendor, uint256 score);\\r\\n    \\r\\n    // Modifiers\\r\\n    modifier onlyVendor() {\\r\\n        require(vendors[msg.sender].wallet != address(0), \\\"VendorRegistry: Not a registered vendor\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyActiveVendor() {\\r\\n        require(\\r\\n            vendors[msg.sender].wallet != address(0) && \\r\\n            vendors[msg.sender].status == VendorStatus.Active,\\r\\n            \\\"VendorRegistry: Not an active vendor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner(), \\\"VendorRegistry: Only admin can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor() Ownable(msg.sender) {}\\r\\n    \\r\\n    /**\\r\\n     * @dev Register a new vendor\\r\\n     * @param ensName ENS subname for the vendor (e.g., \\\"business.tapngo.eth\\\")\\r\\n     * @param businessName Display name of the business\\r\\n     * @param phoneHash Hashed phone number\\r\\n     */\\r\\n    function registerVendor(\\r\\n        string memory ensName,\\r\\n        string memory businessName,\\r\\n        string memory phoneHash\\r\\n    ) external whenNotPaused {\\r\\n        require(vendors[msg.sender].wallet == address(0), \\\"VendorRegistry: Vendor already registered\\\");\\r\\n        require(bytes(ensName).length > 0, \\\"VendorRegistry: ENS name cannot be empty\\\");\\r\\n        require(bytes(businessName).length > 0, \\\"VendorRegistry: Business name cannot be empty\\\");\\r\\n        require(bytes(phoneHash).length > 0, \\\"VendorRegistry: Phone hash cannot be empty\\\");\\r\\n        require(ensToVendor[ensName] == address(0), \\\"VendorRegistry: ENS name already taken\\\");\\r\\n        require(!usedPhoneHashes[phoneHash], \\\"VendorRegistry: Phone number already used\\\");\\r\\n        \\r\\n        // Create vendor profile\\r\\n        VendorProfile memory newVendor = VendorProfile({\\r\\n            wallet: msg.sender,\\r\\n            ensName: ensName,\\r\\n            businessName: businessName,\\r\\n            phoneHash: phoneHash,\\r\\n            phoneVerified: false,\\r\\n            efpVerified: false,\\r\\n            efpasScore: 0,\\r\\n            status: VendorStatus.Pending,\\r\\n            registrationTime: block.timestamp,\\r\\n            lastUpdated: block.timestamp\\r\\n        });\\r\\n        \\r\\n        vendors[msg.sender] = newVendor;\\r\\n        ensToVendor[ensName] = msg.sender;\\r\\n        usedPhoneHashes[phoneHash] = true;\\r\\n        vendorAddresses.push(msg.sender);\\r\\n        \\r\\n        emit VendorRegistered(msg.sender, ensName, businessName, phoneHash);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Approve a vendor (admin only)\\r\\n     * @param vendorAddress Address of the vendor to approve\\r\\n     */\\r\\n    function approveVendor(address vendorAddress) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Pending, \\\"VendorRegistry: Vendor not pending\\\");\\r\\n        \\r\\n        // Check verification requirements\\r\\n        if (requirePhoneVerification) {\\r\\n            require(vendors[vendorAddress].phoneVerified, \\\"VendorRegistry: Phone verification required\\\");\\r\\n        }\\r\\n        if (requireEFPVerification) {\\r\\n            require(vendors[vendorAddress].efpVerified, \\\"VendorRegistry: EFP verification required\\\");\\r\\n        }\\r\\n        if (minEFPasScore > 0) {\\r\\n            require(vendors[vendorAddress].efpasScore >= minEFPasScore, \\\"VendorRegistry: EFPas score too low\\\");\\r\\n        }\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Active;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorApproved(vendorAddress, vendors[vendorAddress].ensName);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Suspend a vendor (admin only)\\r\\n     * @param vendorAddress Address of the vendor to suspend\\r\\n     * @param reason Reason for suspension\\r\\n     */\\r\\n    function suspendVendor(address vendorAddress, string memory reason) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Active, \\\"VendorRegistry: Vendor not active\\\");\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Suspended;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorSuspended(vendorAddress, reason);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Reject a vendor registration (admin only)\\r\\n     * @param vendorAddress Address of the vendor to reject\\r\\n     * @param reason Reason for rejection\\r\\n     */\\r\\n    function rejectVendor(address vendorAddress, string memory reason) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Pending, \\\"VendorRegistry: Vendor not pending\\\");\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Rejected;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorRejected(vendorAddress, reason);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's phone verification status (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param verified Verification status\\r\\n     */\\r\\n    function updatePhoneVerification(address vendorAddress, bool verified) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].phoneVerified = verified;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit PhoneVerified(vendorAddress, vendors[vendorAddress].phoneHash);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's EFP verification status (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param verified Verification status\\r\\n     */\\r\\n    function updateEFPVerification(address vendorAddress, bool verified) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].efpVerified = verified;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit EFPVerified(vendorAddress, verified);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's EFPas score (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param score EFPas reputation score\\r\\n     */\\r\\n    function updateEFPasScore(address vendorAddress, uint256 score) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].efpasScore = score;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit EFPasScoreUpdated(vendorAddress, score);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update business name (vendor only)\\r\\n     * @param newBusinessName New business name\\r\\n     */\\r\\n    function updateBusinessName(string memory newBusinessName) external onlyVendor {\\r\\n        require(bytes(newBusinessName).length > 0, \\\"VendorRegistry: Business name cannot be empty\\\");\\r\\n        \\r\\n        vendors[msg.sender].businessName = newBusinessName;\\r\\n        vendors[msg.sender].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorUpdated(msg.sender, \\\"businessName\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get vendor profile by address\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @return profile Vendor profile struct\\r\\n     */\\r\\n    function getVendorProfile(address vendorAddress) external view returns (VendorProfile memory profile) {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        return vendors[vendorAddress];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get vendor address by ENS name\\r\\n     * @param ensName ENS name to look up\\r\\n     * @return vendorAddress Address of the vendor\\r\\n     */\\r\\n    function getVendorByENS(string memory ensName) external view returns (address vendorAddress) {\\r\\n        return ensToVendor[ensName];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if an address is a registered vendor\\r\\n     * @param vendorAddress Address to check\\r\\n     * @return isRegistered True if address is a registered vendor\\r\\n     */\\r\\n    function isVendor(address vendorAddress) external view returns (bool isRegistered) {\\r\\n        return vendors[vendorAddress].wallet != address(0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if a vendor is active\\r\\n     * @param vendorAddress Address to check\\r\\n     * @return isActive True if vendor is active\\r\\n     */\\r\\n    function isActiveVendor(address vendorAddress) external view returns (bool isActive) {\\r\\n        return vendors[vendorAddress].wallet != address(0) && \\r\\n               vendors[vendorAddress].status == VendorStatus.Active;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get total number of registered vendors\\r\\n     * @return count Total number of vendors\\r\\n     */\\r\\n    function getVendorCount() external view returns (uint256 count) {\\r\\n        return vendorAddresses.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all vendor addresses (for pagination)\\r\\n     * @param offset Starting index\\r\\n     * @param limit Maximum number of addresses to return\\r\\n     * @return addresses Array of vendor addresses\\r\\n     */\\r\\n    function getVendorAddresses(uint256 offset, uint256 limit) external view returns (address[] memory addresses) {\\r\\n        require(offset < vendorAddresses.length, \\\"VendorRegistry: Offset out of bounds\\\");\\r\\n        \\r\\n        uint256 end = offset + limit;\\r\\n        if (end > vendorAddresses.length) {\\r\\n            end = vendorAddresses.length;\\r\\n        }\\r\\n        \\r\\n        address[] memory result = new address[](end - offset);\\r\\n        for (uint256 i = offset; i < end; i++) {\\r\\n            result[i - offset] = vendorAddresses[i];\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update verification requirements (admin only)\\r\\n     * @param phoneRequired Whether phone verification is required\\r\\n     * @param efpRequired Whether EFP verification is required\\r\\n     * @param minScore Minimum EFPas score required\\r\\n     */\\r\\n    function updateVerificationRequirements(\\r\\n        bool phoneRequired,\\r\\n        bool efpRequired,\\r\\n        uint256 minScore\\r\\n    ) external onlyAdmin {\\r\\n        requirePhoneVerification = phoneRequired;\\r\\n        requireEFPVerification = efpRequired;\\r\\n        minEFPasScore = minScore;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pause the contract (admin only)\\r\\n     */\\r\\n    function pause() external onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Unpause the contract (admin only)\\r\\n     */\\r\\n    function unpause() external onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd489b176a6aaa264ba089ce8665709ea750694f864c54727aefa5aa8f5d6497a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006007553480156200001657600080fd5b50604051620025f0380380620025f083398101604081905262000039916200011c565b33806200006057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006b81620000af565b50600180546001600160a01b039485166001600160a01b03199182161790915560028054938516938216939093179092556003805491909316911617905562000166565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200011757600080fd5b919050565b6000806000606084860312156200013257600080fd5b6200013d84620000ff565b92506200014d60208501620000ff565b91506200015d60408501620000ff565b90509250925092565b61247a80620001766000396000f3fe6080604052600436106101445760003560e01c80637d73b231116100b6578063af582c6b1161006f578063af582c6b1461039d578063b672b168146103bd578063dc55e231146103f8578063dc6ea44714610425578063e6fe39ed14610466578063f2fde38b1461048657600080fd5b80637d73b231146102f75780638456cb59146103175780638da5cb5b1461032c5780638e78d5781461034a578063a43bb5eb1461035d578063adce1c5f1461037d57600080fd5b80633f4ba83a116101085780633f4ba83a14610220578063476343ee146102355780635c975abb1461024a5780636cd5217b14610275578063715018a61461029557806375ec600a146102aa57600080fd5b8063012beac91461015057806314c44e091461018d57806317e362dd146101b15780631b385ec1146101d157806330bdf141146101fe57600080fd5b3661014b57005b600080fd5b34801561015c57600080fd5b50600154610170906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019957600080fd5b506101a360075481565b604051908152602001610184565b3480156101bd57600080fd5b506101706101cc366004611c4b565b6104a6565b3480156101dd57600080fd5b506101f16101ec366004611c9d565b6104d7565b6040516101849190611d19565b34801561020a57600080fd5b5061021e610219366004611c4b565b610590565b005b34801561022c57600080fd5b5061021e6107dc565b34801561024157600080fd5b5061021e610810565b34801561025657600080fd5b50600054600160a01b900460ff165b6040519015158152602001610184565b34801561028157600080fd5b5061021e610290366004611d33565b61094f565b3480156102a157600080fd5b5061021e610d4f565b3480156102b657600080fd5b506101a36040805160006020820152600080516020612425833981519152918101919091526060016040516020818303038152906040528051906020012081565b34801561030357600080fd5b50600254610170906001600160a01b031681565b34801561032357600080fd5b5061021e610d61565b34801561033857600080fd5b506000546001600160a01b0316610170565b61021e610358366004611c4b565b610d93565b34801561036957600080fd5b50610265610378366004611c4b565b6114b6565b34801561038957600080fd5b50600354610170906001600160a01b031681565b3480156103a957600080fd5b5061021e6103b8366004611d85565b6114e1565b3480156103c957600080fd5b506102656103d8366004611c4b565b805160208183018101805160068252928201919093012091525460ff1681565b34801561040457600080fd5b50610418610413366004611d9e565b611550565b6040516101849190611dbb565b34801561043157600080fd5b50610170610440366004611c4b565b80516020818301810180516004825292820191909301209152546001600160a01b031681565b34801561047257600080fd5b5061021e610481366004611d9e565b61163f565b34801561049257600080fd5b5061021e6104a1366004611d9e565b6116fb565b60006004826040516104b89190611e1d565b908152604051908190036020019020546001600160a01b031692915050565b600560205281600052604060002081815481106104f357600080fd5b9060005260206000200160009150915050805461050f90611e39565b80601f016020809104026020016040519081016040528092919081815260200182805461053b90611e39565b80156105885780601f1061055d57610100808354040283529160200191610588565b820191906000526020600020905b81548152906001019060200180831161056b57829003601f168201915b505050505081565b6000546001600160a01b031633146105c35760405162461bcd60e51b81526004016105ba90611e73565b60405180910390fd5b6006816040516105d39190611e1d565b9081526040519081900360200190205460ff166106435760405162461bcd60e51b815260206004820152602860248201527f5375626e616d655265676973747261723a205375626e616d6520646f6573206e6044820152671bdd08195e1a5cdd60c21b60648201526084016105ba565b60006004826040516106559190611e1d565b908152604051908190036020018120546001600160a01b0316915060049061067e908490611e1d565b90815260405190819003602001812080546001600160a01b03191690556000906006906106ac908590611e1d565b908152604051908190036020019020805491151560ff199092169190911790556106d68183611739565b815160208084019190912060025460405191926001600160a01b0390911691635ef2c7f091610721916000916000805160206124258339815191529101918252602082015260400190565b604051602081830303815290604052805190602001208360008060006040518663ffffffff1660e01b815260040161075d959493929190611ec6565b600060405180830381600087803b15801561077757600080fd5b505af115801561078b573d6000803e3d6000fd5b50505050816001600160a01b0316836040516107a79190611e1d565b604051908190038120907f2fc032eb98f8c4ae6db30fbf4379d617857aef067db2083bd2f30416623a075b90600090a3505050565b6000546001600160a01b031633146108065760405162461bcd60e51b81526004016105ba90611e73565b61080e611838565b565b6000546001600160a01b0316331461083a5760405162461bcd60e51b81526004016105ba90611e73565b47806108965760405162461bcd60e51b815260206004820152602560248201527f5375626e616d655265676973747261723a204e6f206665657320746f20776974604482015264686472617760d81b60648201526084016105ba565b600080546040516001600160a01b039091169083908381818185875af1925050503d80600081146108e3576040519150601f19603f3d011682016040523d82523d6000602084013e6108e8565b606091505b505090508061094b5760405162461bcd60e51b815260206004820152602960248201527f5375626e616d655265676973747261723a204661696c656420746f207769746860448201526864726177206665657360b81b60648201526084016105ba565b5050565b81336001600160a01b031660048260405161096a9190611e1d565b908152604051908190036020019020546001600160a01b0316146109e85760405162461bcd60e51b815260206004820152602f60248201527f5375626e616d655265676973747261723a204e6f7420746865206f776e65722060448201526e6f662074686973207375626e616d6560881b60648201526084016105ba565b6001600160a01b038216610a595760405162461bcd60e51b815260206004820152603260248201527f5375626e616d655265676973747261723a204e6577206f776e65722063616e6e6044820152716f74206265207a65726f206164647265737360701b60648201526084016105ba565b336001600160a01b03831603610ac35760405162461bcd60e51b815260206004820152602960248201527f5375626e616d655265676973747261723a2043616e6e6f74207472616e73666560448201526839103a379039b2b63360b91b60648201526084016105ba565b6000600484604051610ad59190611e1d565b908152604051908190036020018120546001600160a01b031691508390600490610b00908790611e1d565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055610b398185611739565b6001600160a01b038316600090815260056020908152604082208054600181018255908352912001610b6b8582611f4b565b5060008480519060200120905060008060001b600080516020612425833981519152604051602001610ba7929190918252602082015260400190565b60408051808303601f190181528282528051602091820120818401528282018590528151808403830181526060840190925281519101206002546000608084015260008051602061242583398151915260a08401529092506001600160a01b031690635ef2c7f09060c00160408051601f198184030181529082905280516020909101206003546001600160e01b031960e085901b168352610c5e9287918b916001600160a01b0390911690600090600401611ec6565b600060405180830381600087803b158015610c7857600080fd5b505af1158015610c8c573d6000803e3d6000fd5b505060035460405162d5fa2b60e81b8152600481018590526001600160a01b038981166024830152909116925063d5fa2b009150604401600060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b50505050846001600160a01b0316836001600160a01b031687604051610d179190611e1d565b604051908190038120907f7d83255ce44603fb701ee6f64038718c14f35b10cb3ea11dc6069599a3af9eba90600090a4505050505050565b610d5761188d565b61080e60006118ba565b6000546001600160a01b03163314610d8b5760405162461bcd60e51b81526004016105ba90611e73565b61080e61190a565b60015460405163353f20fd60e01b81523360048201526001600160a01b039091169063353f20fd90602401602060405180830381865afa158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dff9190612020565b610e715760405162461bcd60e51b815260206004820152603b60248201527f5375626e616d655265676973747261723a204f6e6c792061637469766520766560448201527f6e646f72732063616e207265676973746572207375626e616d6573000000000060648201526084016105ba565b610e7961194d565b6000815111610edc5760405162461bcd60e51b815260206004820152602960248201527f5375626e616d655265676973747261723a205375626e616d652063616e6e6f7460448201526820626520656d70747960b81b60648201526084016105ba565b600681604051610eec9190611e1d565b9081526040519081900360200190205460ff1615610f5d5760405162461bcd60e51b815260206004820152602860248201527f5375626e616d655265676973747261723a205375626e616d6520616c72656164604482015267792065786973747360c01b60648201526084016105ba565b600754341015610fc75760405162461bcd60e51b815260206004820152602f60248201527f5375626e616d655265676973747261723a20496e73756666696369656e74207260448201526e6567697374726174696f6e2066656560881b60648201526084016105ba565b600154604051635480df8960e01b81523360048201526000916001600160a01b031690635480df8990602401600060405180830381865afa158015611010573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611038919081019061209a565b90506000816020015151116110a75760405162461bcd60e51b815260206004820152602f60248201527f5375626e616d655265676973747261723a2056656e646f72206d75737420686160448201526e1d9948115394c81b985b59481cd95d608a1b60648201526084016105ba565b60006110b68260200151611978565b905080805190602001208380519060200120146111455760405162461bcd60e51b815260206004820152604160248201527f5375626e616d655265676973747261723a205375626e616d65206d757374206d60448201527f617463682076656e646f722773207265676973746572656420454e53206e616d6064820152606560f81b608482015260a4016105ba565b336004846040516111569190611e1d565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160068460405161119a9190611e1d565b9081526040805160209281900383019020805460ff1916931515939093179092553360009081526005825291822080546001810182559083529120016111e08482611f4b565b50825160208085019190912060025460405191926001600160a01b0390911691635ef2c7f09161122c916000916000805160206124258339815191529101918252602082015260400190565b60408051601f198184030181529082905280516020909101206003546001600160e01b031960e085901b16835261127892869133916001600160a01b0390911690600090600401611ec6565b600060405180830381600087803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b5050604051600092506112d79150829060008051602061242583398151915290602001918252602082015260400190565b60408051601f19818403018152828252805160209182012090830152810183905260600160408051808303601f1901815290829052805160209091012060035462d5fa2b60e81b8352600483018290523360248401529092506001600160a01b03169063d5fa2b0090604401600060405180830381600087803b15801561135d57600080fd5b505af1158015611371573d6000803e3d6000fd5b5050600354604080880151905163043c4ea360e21b81526001600160a01b0390921693506310f13a8c92506113ab918591906004016121b6565b600060405180830381600087803b1580156113c557600080fd5b505af11580156113d9573d6000803e3d6000fd5b50506003546040516001600160a01b0390911692506310f13a8c915083906114059089906020016121f1565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161143192919061222c565b600060405180830381600087803b15801561144b57600080fd5b505af115801561145f573d6000803e3d6000fd5b5050604051339250829150611475908890611e1d565b604051908190038120428252907f9757773aa5da4f18a9d24082f64fa752f0c91d34e92b5c3dfbc63799ef3ac04c9060200160405180910390a45050505050565b60006006826040516114c89190611e1d565b9081526040519081900360200190205460ff1692915050565b6000546001600160a01b0316331461150b5760405162461bcd60e51b81526004016105ba90611e73565b600780549082905560408051828152602081018490527f50b218c5a101ad05d53ab0a964d01da639ee79525ae4b7802ed714249740a8d5910160405180910390a15050565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b828210156116345783829060005260206000200180546115a790611e39565b80601f01602080910402602001604051908101604052809291908181526020018280546115d390611e39565b80156116205780601f106115f557610100808354040283529160200191611620565b820191906000526020600020905b81548152906001019060200180831161160357829003601f168201915b505050505081526020019060010190611588565b505050509050919050565b6000546001600160a01b031633146116695760405162461bcd60e51b81526004016105ba90611e73565b6001600160a01b0381166116d95760405162461bcd60e51b815260206004820152603160248201527f5375626e616d655265676973747261723a205265736f6c7665722063616e6e6f60448201527074206265207a65726f206164647265737360781b60648201526084016105ba565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61170361188d565b6001600160a01b03811661172d57604051631e4fbdf760e01b8152600060048201526024016105ba565b611736816118ba565b50565b6001600160a01b0382166000908152600560205260408120905b81548110156118325782805190602001208282815481106117765761177661225f565b9060005260206000200160405161178d9190612275565b60405180910390200361182057815482906117aa90600190612301565b815481106117ba576117ba61225f565b906000526020600020018282815481106117d6576117d661225f565b9060005260206000200190816117ec919061231a565b50818054806117fd576117fd6123f5565b6001900381819060005260206000200160006118199190611b0e565b9055611832565b8061182a8161240b565b915050611753565b50505050565b611840611ae4565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b0316331461080e5760405163118cdaa760e01b81523360048201526024016105ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61191261194d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118703390565b600054600160a01b900460ff161561080e5760405163d93c066560e01b815260040160405180910390fd5b6060816000805b82518110156119cd5782818151811061199a5761199a61225f565b01602001516001600160f81b031916601760f91b036119bb578091506119cd565b806119c58161240b565b91505061197f565b5060008111611a305760405162461bcd60e51b815260206004820152602960248201527f5375626e616d655265676973747261723a20496e76616c696420454e53206e616044820152681b5948199bdc9b585d60ba1b60648201526084016105ba565b60008167ffffffffffffffff811115611a4b57611a4b611b5c565b6040519080825280601f01601f191660200182016040528015611a75576020820181803683370190505b50905060005b82811015611adb57838181518110611a9557611a9561225f565b602001015160f81c60f81b828281518110611ab257611ab261225f565b60200101906001600160f81b031916908160001a90535080611ad38161240b565b915050611a7b565b50949350505050565b600054600160a01b900460ff1661080e57604051638dfc202b60e01b815260040160405180910390fd5b508054611b1a90611e39565b6000825580601f10611b2a575050565b601f01602090049060005260206000209081019061173691905b80821115611b585760008155600101611b44565b5090565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715611b9657611b96611b5c565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611bc557611bc5611b5c565b604052919050565b600067ffffffffffffffff821115611be757611be7611b5c565b50601f01601f191660200190565b600082601f830112611c0657600080fd5b8135611c19611c1482611bcd565b611b9c565b818152846020838601011115611c2e57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611c5d57600080fd5b813567ffffffffffffffff811115611c7457600080fd5b611c8084828501611bf5565b949350505050565b6001600160a01b038116811461173657600080fd5b60008060408385031215611cb057600080fd5b8235611cbb81611c88565b946020939093013593505050565b60005b83811015611ce4578181015183820152602001611ccc565b50506000910152565b60008151808452611d05816020860160208601611cc9565b601f01601f19169290920160200192915050565b602081526000611d2c6020830184611ced565b9392505050565b60008060408385031215611d4657600080fd5b823567ffffffffffffffff811115611d5d57600080fd5b611d6985828601611bf5565b9250506020830135611d7a81611c88565b809150509250929050565b600060208284031215611d9757600080fd5b5035919050565b600060208284031215611db057600080fd5b8135611d2c81611c88565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611e1057603f19888603018452611dfe858351611ced565b94509285019290850190600101611de2565b5092979650505050505050565b60008251611e2f818460208701611cc9565b9190910192915050565b600181811c90821680611e4d57607f821691505b602082108103611e6d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526033908201527f5375626e616d655265676973747261723a204f6e6c792061646d696e2063616e6040820152721031b0b636103a3434b990333ab731ba34b7b760691b606082015260800190565b94855260208501939093526001600160a01b03918216604085015216606083015267ffffffffffffffff16608082015260a00190565b601f821115611f4657600081815260208120601f850160051c81016020861015611f235750805b601f850160051c820191505b81811015611f4257828155600101611f2f565b5050505b505050565b815167ffffffffffffffff811115611f6557611f65611b5c565b611f7981611f738454611e39565b84611efc565b602080601f831160018114611fae5760008415611f965750858301515b600019600386901b1c1916600185901b178555611f42565b600085815260208120601f198616915b82811015611fdd57888601518255948401946001909101908401611fbe565b5085821015611ffb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8051801515811461201b57600080fd5b919050565b60006020828403121561203257600080fd5b611d2c8261200b565b805161201b81611c88565b600082601f83011261205757600080fd5b8151612065611c1482611bcd565b81815284602083860101111561207a57600080fd5b611c80826020830160208701611cc9565b80516004811061201b57600080fd5b6000602082840312156120ac57600080fd5b815167ffffffffffffffff808211156120c457600080fd5b9083019061014082860312156120d957600080fd5b6120e1611b72565b6120ea8361203b565b81526020830151828111156120fe57600080fd5b61210a87828601612046565b60208301525060408301518281111561212257600080fd5b61212e87828601612046565b60408301525060608301518281111561214657600080fd5b61215287828601612046565b6060830152506121646080840161200b565b608082015261217560a0840161200b565b60a082015260c083015160c082015261219060e0840161208b565b60e082015261010083810151908201526101209283015192810192909252509392505050565b82815260606020820152600b60608201526a3232b9b1b934b83a34b7b760a91b608082015260a060408201526000611c8060a0830184611ced565b7268747470733a2f2f7461706e676f2e6574682f60681b81526000825161221f816013850160208701611cc9565b9190910160130192915050565b8281526060602082015260036060820152621d5c9b60ea1b608082015260a060408201526000611c8060a0830184611ced565b634e487b7160e01b600052603260045260246000fd5b600080835461228381611e39565b6001828116801561229b57600181146122b0576122df565b60ff19841687528215158302870194506122df565b8760005260208060002060005b858110156122d65781548a8201529084019082016122bd565b50505082870194505b50929695505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115612314576123146122eb565b92915050565b818103612325575050565b61232f8254611e39565b67ffffffffffffffff81111561234757612347611b5c565b61235581611f738454611e39565b6000601f82116001811461238957600083156123715750848201545b600019600385901b1c1916600184901b1784556123ee565b600085815260209020601f19841690600086815260209020845b838110156123c357828601548255600195860195909101906020016123a3565b50858310156123e15781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b60006001820161241d5761241d6122eb565b506001019056fe30b1ad1ded92ab20297efc1a63bd196f1eb0465dd09f0051f27ff6780b92ff19a2646970667358221220ec721be6d1a4340bc9d4d3bf8fd2c0ded54a1a1045f634a846bd86828841e3e764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80637d73b231116100b6578063af582c6b1161006f578063af582c6b1461039d578063b672b168146103bd578063dc55e231146103f8578063dc6ea44714610425578063e6fe39ed14610466578063f2fde38b1461048657600080fd5b80637d73b231146102f75780638456cb59146103175780638da5cb5b1461032c5780638e78d5781461034a578063a43bb5eb1461035d578063adce1c5f1461037d57600080fd5b80633f4ba83a116101085780633f4ba83a14610220578063476343ee146102355780635c975abb1461024a5780636cd5217b14610275578063715018a61461029557806375ec600a146102aa57600080fd5b8063012beac91461015057806314c44e091461018d57806317e362dd146101b15780631b385ec1146101d157806330bdf141146101fe57600080fd5b3661014b57005b600080fd5b34801561015c57600080fd5b50600154610170906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019957600080fd5b506101a360075481565b604051908152602001610184565b3480156101bd57600080fd5b506101706101cc366004611c4b565b6104a6565b3480156101dd57600080fd5b506101f16101ec366004611c9d565b6104d7565b6040516101849190611d19565b34801561020a57600080fd5b5061021e610219366004611c4b565b610590565b005b34801561022c57600080fd5b5061021e6107dc565b34801561024157600080fd5b5061021e610810565b34801561025657600080fd5b50600054600160a01b900460ff165b6040519015158152602001610184565b34801561028157600080fd5b5061021e610290366004611d33565b61094f565b3480156102a157600080fd5b5061021e610d4f565b3480156102b657600080fd5b506101a36040805160006020820152600080516020612425833981519152918101919091526060016040516020818303038152906040528051906020012081565b34801561030357600080fd5b50600254610170906001600160a01b031681565b34801561032357600080fd5b5061021e610d61565b34801561033857600080fd5b506000546001600160a01b0316610170565b61021e610358366004611c4b565b610d93565b34801561036957600080fd5b50610265610378366004611c4b565b6114b6565b34801561038957600080fd5b50600354610170906001600160a01b031681565b3480156103a957600080fd5b5061021e6103b8366004611d85565b6114e1565b3480156103c957600080fd5b506102656103d8366004611c4b565b805160208183018101805160068252928201919093012091525460ff1681565b34801561040457600080fd5b50610418610413366004611d9e565b611550565b6040516101849190611dbb565b34801561043157600080fd5b50610170610440366004611c4b565b80516020818301810180516004825292820191909301209152546001600160a01b031681565b34801561047257600080fd5b5061021e610481366004611d9e565b61163f565b34801561049257600080fd5b5061021e6104a1366004611d9e565b6116fb565b60006004826040516104b89190611e1d565b908152604051908190036020019020546001600160a01b031692915050565b600560205281600052604060002081815481106104f357600080fd5b9060005260206000200160009150915050805461050f90611e39565b80601f016020809104026020016040519081016040528092919081815260200182805461053b90611e39565b80156105885780601f1061055d57610100808354040283529160200191610588565b820191906000526020600020905b81548152906001019060200180831161056b57829003601f168201915b505050505081565b6000546001600160a01b031633146105c35760405162461bcd60e51b81526004016105ba90611e73565b60405180910390fd5b6006816040516105d39190611e1d565b9081526040519081900360200190205460ff166106435760405162461bcd60e51b815260206004820152602860248201527f5375626e616d655265676973747261723a205375626e616d6520646f6573206e6044820152671bdd08195e1a5cdd60c21b60648201526084016105ba565b60006004826040516106559190611e1d565b908152604051908190036020018120546001600160a01b0316915060049061067e908490611e1d565b90815260405190819003602001812080546001600160a01b03191690556000906006906106ac908590611e1d565b908152604051908190036020019020805491151560ff199092169190911790556106d68183611739565b815160208084019190912060025460405191926001600160a01b0390911691635ef2c7f091610721916000916000805160206124258339815191529101918252602082015260400190565b604051602081830303815290604052805190602001208360008060006040518663ffffffff1660e01b815260040161075d959493929190611ec6565b600060405180830381600087803b15801561077757600080fd5b505af115801561078b573d6000803e3d6000fd5b50505050816001600160a01b0316836040516107a79190611e1d565b604051908190038120907f2fc032eb98f8c4ae6db30fbf4379d617857aef067db2083bd2f30416623a075b90600090a3505050565b6000546001600160a01b031633146108065760405162461bcd60e51b81526004016105ba90611e73565b61080e611838565b565b6000546001600160a01b0316331461083a5760405162461bcd60e51b81526004016105ba90611e73565b47806108965760405162461bcd60e51b815260206004820152602560248201527f5375626e616d655265676973747261723a204e6f206665657320746f20776974604482015264686472617760d81b60648201526084016105ba565b600080546040516001600160a01b039091169083908381818185875af1925050503d80600081146108e3576040519150601f19603f3d011682016040523d82523d6000602084013e6108e8565b606091505b505090508061094b5760405162461bcd60e51b815260206004820152602960248201527f5375626e616d655265676973747261723a204661696c656420746f207769746860448201526864726177206665657360b81b60648201526084016105ba565b5050565b81336001600160a01b031660048260405161096a9190611e1d565b908152604051908190036020019020546001600160a01b0316146109e85760405162461bcd60e51b815260206004820152602f60248201527f5375626e616d655265676973747261723a204e6f7420746865206f776e65722060448201526e6f662074686973207375626e616d6560881b60648201526084016105ba565b6001600160a01b038216610a595760405162461bcd60e51b815260206004820152603260248201527f5375626e616d655265676973747261723a204e6577206f776e65722063616e6e6044820152716f74206265207a65726f206164647265737360701b60648201526084016105ba565b336001600160a01b03831603610ac35760405162461bcd60e51b815260206004820152602960248201527f5375626e616d655265676973747261723a2043616e6e6f74207472616e73666560448201526839103a379039b2b63360b91b60648201526084016105ba565b6000600484604051610ad59190611e1d565b908152604051908190036020018120546001600160a01b031691508390600490610b00908790611e1d565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055610b398185611739565b6001600160a01b038316600090815260056020908152604082208054600181018255908352912001610b6b8582611f4b565b5060008480519060200120905060008060001b600080516020612425833981519152604051602001610ba7929190918252602082015260400190565b60408051808303601f190181528282528051602091820120818401528282018590528151808403830181526060840190925281519101206002546000608084015260008051602061242583398151915260a08401529092506001600160a01b031690635ef2c7f09060c00160408051601f198184030181529082905280516020909101206003546001600160e01b031960e085901b168352610c5e9287918b916001600160a01b0390911690600090600401611ec6565b600060405180830381600087803b158015610c7857600080fd5b505af1158015610c8c573d6000803e3d6000fd5b505060035460405162d5fa2b60e81b8152600481018590526001600160a01b038981166024830152909116925063d5fa2b009150604401600060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b50505050846001600160a01b0316836001600160a01b031687604051610d179190611e1d565b604051908190038120907f7d83255ce44603fb701ee6f64038718c14f35b10cb3ea11dc6069599a3af9eba90600090a4505050505050565b610d5761188d565b61080e60006118ba565b6000546001600160a01b03163314610d8b5760405162461bcd60e51b81526004016105ba90611e73565b61080e61190a565b60015460405163353f20fd60e01b81523360048201526001600160a01b039091169063353f20fd90602401602060405180830381865afa158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dff9190612020565b610e715760405162461bcd60e51b815260206004820152603b60248201527f5375626e616d655265676973747261723a204f6e6c792061637469766520766560448201527f6e646f72732063616e207265676973746572207375626e616d6573000000000060648201526084016105ba565b610e7961194d565b6000815111610edc5760405162461bcd60e51b815260206004820152602960248201527f5375626e616d655265676973747261723a205375626e616d652063616e6e6f7460448201526820626520656d70747960b81b60648201526084016105ba565b600681604051610eec9190611e1d565b9081526040519081900360200190205460ff1615610f5d5760405162461bcd60e51b815260206004820152602860248201527f5375626e616d655265676973747261723a205375626e616d6520616c72656164604482015267792065786973747360c01b60648201526084016105ba565b600754341015610fc75760405162461bcd60e51b815260206004820152602f60248201527f5375626e616d655265676973747261723a20496e73756666696369656e74207260448201526e6567697374726174696f6e2066656560881b60648201526084016105ba565b600154604051635480df8960e01b81523360048201526000916001600160a01b031690635480df8990602401600060405180830381865afa158015611010573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611038919081019061209a565b90506000816020015151116110a75760405162461bcd60e51b815260206004820152602f60248201527f5375626e616d655265676973747261723a2056656e646f72206d75737420686160448201526e1d9948115394c81b985b59481cd95d608a1b60648201526084016105ba565b60006110b68260200151611978565b905080805190602001208380519060200120146111455760405162461bcd60e51b815260206004820152604160248201527f5375626e616d655265676973747261723a205375626e616d65206d757374206d60448201527f617463682076656e646f722773207265676973746572656420454e53206e616d6064820152606560f81b608482015260a4016105ba565b336004846040516111569190611e1d565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160068460405161119a9190611e1d565b9081526040805160209281900383019020805460ff1916931515939093179092553360009081526005825291822080546001810182559083529120016111e08482611f4b565b50825160208085019190912060025460405191926001600160a01b0390911691635ef2c7f09161122c916000916000805160206124258339815191529101918252602082015260400190565b60408051601f198184030181529082905280516020909101206003546001600160e01b031960e085901b16835261127892869133916001600160a01b0390911690600090600401611ec6565b600060405180830381600087803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b5050604051600092506112d79150829060008051602061242583398151915290602001918252602082015260400190565b60408051601f19818403018152828252805160209182012090830152810183905260600160408051808303601f1901815290829052805160209091012060035462d5fa2b60e81b8352600483018290523360248401529092506001600160a01b03169063d5fa2b0090604401600060405180830381600087803b15801561135d57600080fd5b505af1158015611371573d6000803e3d6000fd5b5050600354604080880151905163043c4ea360e21b81526001600160a01b0390921693506310f13a8c92506113ab918591906004016121b6565b600060405180830381600087803b1580156113c557600080fd5b505af11580156113d9573d6000803e3d6000fd5b50506003546040516001600160a01b0390911692506310f13a8c915083906114059089906020016121f1565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161143192919061222c565b600060405180830381600087803b15801561144b57600080fd5b505af115801561145f573d6000803e3d6000fd5b5050604051339250829150611475908890611e1d565b604051908190038120428252907f9757773aa5da4f18a9d24082f64fa752f0c91d34e92b5c3dfbc63799ef3ac04c9060200160405180910390a45050505050565b60006006826040516114c89190611e1d565b9081526040519081900360200190205460ff1692915050565b6000546001600160a01b0316331461150b5760405162461bcd60e51b81526004016105ba90611e73565b600780549082905560408051828152602081018490527f50b218c5a101ad05d53ab0a964d01da639ee79525ae4b7802ed714249740a8d5910160405180910390a15050565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b828210156116345783829060005260206000200180546115a790611e39565b80601f01602080910402602001604051908101604052809291908181526020018280546115d390611e39565b80156116205780601f106115f557610100808354040283529160200191611620565b820191906000526020600020905b81548152906001019060200180831161160357829003601f168201915b505050505081526020019060010190611588565b505050509050919050565b6000546001600160a01b031633146116695760405162461bcd60e51b81526004016105ba90611e73565b6001600160a01b0381166116d95760405162461bcd60e51b815260206004820152603160248201527f5375626e616d655265676973747261723a205265736f6c7665722063616e6e6f60448201527074206265207a65726f206164647265737360781b60648201526084016105ba565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61170361188d565b6001600160a01b03811661172d57604051631e4fbdf760e01b8152600060048201526024016105ba565b611736816118ba565b50565b6001600160a01b0382166000908152600560205260408120905b81548110156118325782805190602001208282815481106117765761177661225f565b9060005260206000200160405161178d9190612275565b60405180910390200361182057815482906117aa90600190612301565b815481106117ba576117ba61225f565b906000526020600020018282815481106117d6576117d661225f565b9060005260206000200190816117ec919061231a565b50818054806117fd576117fd6123f5565b6001900381819060005260206000200160006118199190611b0e565b9055611832565b8061182a8161240b565b915050611753565b50505050565b611840611ae4565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b0316331461080e5760405163118cdaa760e01b81523360048201526024016105ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61191261194d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118703390565b600054600160a01b900460ff161561080e5760405163d93c066560e01b815260040160405180910390fd5b6060816000805b82518110156119cd5782818151811061199a5761199a61225f565b01602001516001600160f81b031916601760f91b036119bb578091506119cd565b806119c58161240b565b91505061197f565b5060008111611a305760405162461bcd60e51b815260206004820152602960248201527f5375626e616d655265676973747261723a20496e76616c696420454e53206e616044820152681b5948199bdc9b585d60ba1b60648201526084016105ba565b60008167ffffffffffffffff811115611a4b57611a4b611b5c565b6040519080825280601f01601f191660200182016040528015611a75576020820181803683370190505b50905060005b82811015611adb57838181518110611a9557611a9561225f565b602001015160f81c60f81b828281518110611ab257611ab261225f565b60200101906001600160f81b031916908160001a90535080611ad38161240b565b915050611a7b565b50949350505050565b600054600160a01b900460ff1661080e57604051638dfc202b60e01b815260040160405180910390fd5b508054611b1a90611e39565b6000825580601f10611b2a575050565b601f01602090049060005260206000209081019061173691905b80821115611b585760008155600101611b44565b5090565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715611b9657611b96611b5c565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611bc557611bc5611b5c565b604052919050565b600067ffffffffffffffff821115611be757611be7611b5c565b50601f01601f191660200190565b600082601f830112611c0657600080fd5b8135611c19611c1482611bcd565b611b9c565b818152846020838601011115611c2e57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611c5d57600080fd5b813567ffffffffffffffff811115611c7457600080fd5b611c8084828501611bf5565b949350505050565b6001600160a01b038116811461173657600080fd5b60008060408385031215611cb057600080fd5b8235611cbb81611c88565b946020939093013593505050565b60005b83811015611ce4578181015183820152602001611ccc565b50506000910152565b60008151808452611d05816020860160208601611cc9565b601f01601f19169290920160200192915050565b602081526000611d2c6020830184611ced565b9392505050565b60008060408385031215611d4657600080fd5b823567ffffffffffffffff811115611d5d57600080fd5b611d6985828601611bf5565b9250506020830135611d7a81611c88565b809150509250929050565b600060208284031215611d9757600080fd5b5035919050565b600060208284031215611db057600080fd5b8135611d2c81611c88565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611e1057603f19888603018452611dfe858351611ced565b94509285019290850190600101611de2565b5092979650505050505050565b60008251611e2f818460208701611cc9565b9190910192915050565b600181811c90821680611e4d57607f821691505b602082108103611e6d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526033908201527f5375626e616d655265676973747261723a204f6e6c792061646d696e2063616e6040820152721031b0b636103a3434b990333ab731ba34b7b760691b606082015260800190565b94855260208501939093526001600160a01b03918216604085015216606083015267ffffffffffffffff16608082015260a00190565b601f821115611f4657600081815260208120601f850160051c81016020861015611f235750805b601f850160051c820191505b81811015611f4257828155600101611f2f565b5050505b505050565b815167ffffffffffffffff811115611f6557611f65611b5c565b611f7981611f738454611e39565b84611efc565b602080601f831160018114611fae5760008415611f965750858301515b600019600386901b1c1916600185901b178555611f42565b600085815260208120601f198616915b82811015611fdd57888601518255948401946001909101908401611fbe565b5085821015611ffb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8051801515811461201b57600080fd5b919050565b60006020828403121561203257600080fd5b611d2c8261200b565b805161201b81611c88565b600082601f83011261205757600080fd5b8151612065611c1482611bcd565b81815284602083860101111561207a57600080fd5b611c80826020830160208701611cc9565b80516004811061201b57600080fd5b6000602082840312156120ac57600080fd5b815167ffffffffffffffff808211156120c457600080fd5b9083019061014082860312156120d957600080fd5b6120e1611b72565b6120ea8361203b565b81526020830151828111156120fe57600080fd5b61210a87828601612046565b60208301525060408301518281111561212257600080fd5b61212e87828601612046565b60408301525060608301518281111561214657600080fd5b61215287828601612046565b6060830152506121646080840161200b565b608082015261217560a0840161200b565b60a082015260c083015160c082015261219060e0840161208b565b60e082015261010083810151908201526101209283015192810192909252509392505050565b82815260606020820152600b60608201526a3232b9b1b934b83a34b7b760a91b608082015260a060408201526000611c8060a0830184611ced565b7268747470733a2f2f7461706e676f2e6574682f60681b81526000825161221f816013850160208701611cc9565b9190910160130192915050565b8281526060602082015260036060820152621d5c9b60ea1b608082015260a060408201526000611c8060a0830184611ced565b634e487b7160e01b600052603260045260246000fd5b600080835461228381611e39565b6001828116801561229b57600181146122b0576122df565b60ff19841687528215158302870194506122df565b8760005260208060002060005b858110156122d65781548a8201529084019082016122bd565b50505082870194505b50929695505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115612314576123146122eb565b92915050565b818103612325575050565b61232f8254611e39565b67ffffffffffffffff81111561234757612347611b5c565b61235581611f738454611e39565b6000601f82116001811461238957600083156123715750848201545b600019600385901b1c1916600184901b1784556123ee565b600085815260209020601f19841690600086815260209020845b838110156123c357828601548255600195860195909101906020016123a3565b50858310156123e15781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b60006001820161241d5761241d6122eb565b506001019056fe30b1ad1ded92ab20297efc1a63bd196f1eb0465dd09f0051f27ff6780b92ff19a2646970667358221220ec721be6d1a4340bc9d4d3bf8fd2c0ded54a1a1045f634a846bd86828841e3e764736f6c63430008140033",
  "devdoc": {
    "details": "Manages ENS subnames under .tapngo.eth for verified vendors This contract issues subnames only to vendors registered in VendorRegistry",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "getSubnameOwner(string)": {
        "details": "Get owner of a subname",
        "params": {
          "subname": "Subname to query"
        },
        "returns": {
          "owner": "Address of the subname owner"
        }
      },
      "getSubnamesByOwner(address)": {
        "details": "Get all subnames owned by an address",
        "params": {
          "owner": "Address to query"
        },
        "returns": {
          "subnames": "Array of subnames owned by the address"
        }
      },
      "isSubnameRegistered(string)": {
        "details": "Check if a subname exists",
        "params": {
          "subname": "Subname to check"
        },
        "returns": {
          "exists": "True if subname exists"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause the contract (admin only)"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerSubname(string)": {
        "details": "Register a new ENS subname for a vendor",
        "params": {
          "subname": "The subname to register (e.g., \"business\" for business.tapngo.eth)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokeSubname(string)": {
        "details": "Revoke a subname (admin only)",
        "params": {
          "subname": "The subname to revoke"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferSubname(string,address)": {
        "details": "Transfer ownership of a subname to another address",
        "params": {
          "newOwner": "The new owner address",
          "subname": "The subname to transfer"
        }
      },
      "unpause()": {
        "details": "Unpause the contract (admin only)"
      },
      "updateRegistrationFee(uint256)": {
        "details": "Update registration fee (admin only)",
        "params": {
          "newFee": "New registration fee in wei"
        }
      },
      "updateResolver(address)": {
        "details": "Update ENS resolver address (admin only)",
        "params": {
          "newResolver": "New resolver address"
        }
      },
      "withdrawFees()": {
        "details": "Withdraw collected fees (admin only)"
      }
    },
    "title": "SubnameRegistrar",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 942,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3112,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "vendorRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VendorRegistry)4829"
      },
      {
        "astId": 3115,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "ensRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ENSRegistry)3087"
      },
      {
        "astId": 3118,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "ensResolver",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ENSResolver)3104"
      },
      {
        "astId": 3136,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "subnameToOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 3141,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "ownerToSubnames",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 3145,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "subnameExists",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 3148,
        "contract": "contracts/SubnameRegistrar.sol:SubnameRegistrar",
        "label": "registrationFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ENSRegistry)3087": {
        "encoding": "inplace",
        "label": "contract ENSRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ENSResolver)3104": {
        "encoding": "inplace",
        "label": "contract ENSResolver",
        "numberOfBytes": "20"
      },
      "t_contract(VendorRegistry)4829": {
        "encoding": "inplace",
        "label": "contract VendorRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}