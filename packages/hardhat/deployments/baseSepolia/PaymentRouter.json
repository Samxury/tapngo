{
  "address": "0x0598c74C30e4e70fb6Cd7cd63c3DDE74756EAb73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_busdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vendorRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "FeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUSDC",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vendorAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PaymentFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUSDC",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum PaymentRouter.PaymentType",
          "name": "paymentType",
          "type": "uint8"
        }
      ],
      "name": "PaymentInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUSDC",
          "type": "uint256"
        }
      ],
      "name": "PaymentRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "PlatformFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "busdcToken",
      "outputs": [
        {
          "internalType": "contract bUSDC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountGHS",
          "type": "uint256"
        }
      ],
      "name": "calculateUSDCAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountUSDC",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "name": "completePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentFxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRateUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "vendorENS",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountGHS",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountUSDC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum PaymentRouter.PaymentType",
              "name": "paymentType",
              "type": "uint8"
            },
            {
              "internalType": "enum PaymentRouter.PaymentStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct PaymentRouter.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getUserReceipts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "orderIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "name": "getVendorEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "earnings",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountGHS",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "initiateInvoicePay",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountGHS",
          "type": "uint256"
        }
      ],
      "name": "initiateQuickPay",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "markPaymentFailed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "receipts",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "vendorENS",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountGHS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountUSDC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fxRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum PaymentRouter.PaymentType",
          "name": "paymentType",
          "type": "uint8"
        },
        {
          "internalType": "enum PaymentRouter.PaymentStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "name": "refundPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "updateExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "updateFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUpdater",
          "type": "address"
        }
      ],
      "name": "updateFxRateUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFeeBps",
          "type": "uint256"
        }
      ],
      "name": "updatePlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userReceipts",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vendorEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vendorRegistry",
      "outputs": [
        {
          "internalType": "contract VendorRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbde41f1f8c58e6b4750b0a5312dfa4810af57db67cc9f38070ed8704886d6b9",
  "receipt": {
    "to": null,
    "from": "0xBab2d51d46042098690a9767339d7603C9F737C1",
    "contractAddress": "0x0598c74C30e4e70fb6Cd7cd63c3DDE74756EAb73",
    "transactionIndex": 34,
    "gasUsed": "2695226",
    "logsBloom": "0x
    "blockHash": "0xd9ba5921705a623daea8523871709f6bba50c8a38e32ebb0c15cb508c0883399",
    "transactionHash": "0xcbde41f1f8c58e6b4750b0a5312dfa4810af57db67cc9f38070ed8704886d6b9",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 30637633,
        "transactionHash": "0xcbde41f1f8c58e6b4750b0a5312dfa4810af57db67cc9f38070ed8704886d6b9",
        "address": "0x0598c74C30e4e70fb6Cd7cd63c3DDE74756EAb73",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bab2d51d46042098690a9767339d7603c9f737c1"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0xd9ba5921705a623daea8523871709f6bba50c8a38e32ebb0c15cb508c0883399"
      }
    ],
    "blockNumber": 30637633,
    "cumulativeGasUsed": "6752335",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeb9361Ec0d712C5B12965FB91c409262b7d6703c",
    "0xA9F04F020CF9F511982719196E25FE7c666c9E4D",
    "0xBab2d51d46042098690a9767339d7603C9F737C1"
  ],
  "numDeployments": 1,
  "solcInputHash": "1e7f658a624141603997a4c1dbf9231d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vendorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vendorAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PaymentFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PaymentRouter.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"}],\"name\":\"PaymentInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"}],\"name\":\"PaymentRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"busdcToken\",\"outputs\":[{\"internalType\":\"contract bUSDC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountGHS\",\"type\":\"uint256\"}],\"name\":\"calculateUSDCAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"completePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRateUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"vendorENS\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGHS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum PaymentRouter.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"enum PaymentRouter.PaymentStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct PaymentRouter.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getUserReceipts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orderIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"name\":\"getVendorEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGHS\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"initiateInvoicePay\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGHS\",\"type\":\"uint256\"}],\"name\":\"initiateQuickPay\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"markPaymentFailed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"vendorENS\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGHS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum PaymentRouter.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"enum PaymentRouter.PaymentStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"refundPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"updateFxRateUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeBps\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userReceipts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vendorEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vendorRegistry\",\"outputs\":[{\"internalType\":\"contract VendorRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Handles bUSDC payments between buyers and vendors Supports Quick Pay (amount only) and Invoice Pay (with metadata) Emits Receipt events for transaction tracking\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"calculateUSDCAmount(uint256)\":{\"details\":\"Calculate amount in USDC from GHS\",\"params\":{\"amountGHS\":\"Amount in GHS\"},\"returns\":{\"amountUSDC\":\"Amount in bUSDC\"}},\"completePayment(bytes32)\":{\"details\":\"Complete a payment by transferring bUSDC tokens\",\"params\":{\"orderId\":\"Order ID to complete\"}},\"emergencyWithdraw(address,uint256)\":{\"details\":\"Emergency withdraw (admin only)\",\"params\":{\"amount\":\"Amount to withdraw (0 for all)\",\"token\":\"Token address to withdraw (0 for ETH)\"}},\"getReceipt(bytes32)\":{\"details\":\"Get receipt by order ID\",\"params\":{\"orderId\":\"Order ID to query\"},\"returns\":{\"receipt\":\"Receipt struct\"}},\"getUserReceipts(address,uint256,uint256)\":{\"details\":\"Get user's receipt IDs\",\"params\":{\"limit\":\"Maximum number of receipts to return\",\"offset\":\"Starting index\",\"user\":\"User address\"},\"returns\":{\"orderIds\":\"Array of order IDs\"}},\"getVendorEarnings(address)\":{\"details\":\"Get vendor's total earnings\",\"params\":{\"vendor\":\"Vendor address\"},\"returns\":{\"earnings\":\"Total earnings in bUSDC\"}},\"initiateInvoicePay(address,uint256,string)\":{\"details\":\"Initiate an Invoice Pay transaction with metadata\",\"params\":{\"amountGHS\":\"Amount in GHS\",\"metadata\":\"JSON string with invoice details\",\"vendor\":\"Vendor's address\"},\"returns\":{\"orderId\":\"Generated order ID\"}},\"initiateQuickPay(address,uint256)\":{\"details\":\"Initiate a Quick Pay transaction\",\"params\":{\"amountGHS\":\"Amount in GHS\",\"vendor\":\"Vendor's address\"},\"returns\":{\"orderId\":\"Generated order ID\"}},\"markPaymentFailed(bytes32,string)\":{\"details\":\"Mark a payment as failed (admin or vendor only)\",\"params\":{\"orderId\":\"Order ID to mark as failed\",\"reason\":\"Reason for failure\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the contract (admin only)\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refundPayment(bytes32)\":{\"details\":\"Refund a completed payment (admin only)\",\"params\":{\"orderId\":\"Order ID to refund\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the contract (admin only)\"},\"updateExchangeRate(uint256)\":{\"details\":\"Update exchange rate (GHS to USDC)\",\"params\":{\"newRate\":\"New exchange rate (6 decimals)\"}},\"updateFeeRecipient(address)\":{\"details\":\"Update fee recipient\",\"params\":{\"newRecipient\":\"New fee recipient address\"}},\"updateFxRateUpdater(address)\":{\"details\":\"Update FX rate updater address\",\"params\":{\"newUpdater\":\"New FX rate updater address\"}},\"updatePlatformFee(uint256)\":{\"details\":\"Update platform fee\",\"params\":{\"newFeeBps\":\"New fee in basis points (100 = 1%)\"}}},\"title\":\"PaymentRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaymentRouter.sol\":\"PaymentRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/PaymentRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./bUSDC.sol\\\";\\r\\nimport \\\"./VendorRegistry.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PaymentRouter\\r\\n * @dev Handles bUSDC payments between buyers and vendors\\r\\n * Supports Quick Pay (amount only) and Invoice Pay (with metadata)\\r\\n * Emits Receipt events for transaction tracking\\r\\n */\\r\\ncontract PaymentRouter is Ownable, Pausable, ReentrancyGuard {\\r\\n    // Payment types\\r\\n    enum PaymentType {\\r\\n        QuickPay,    // 0 - Simple amount-only payment\\r\\n        InvoicePay   // 1 - Payment with invoice metadata\\r\\n    }\\r\\n    \\r\\n    // Payment status\\r\\n    enum PaymentStatus {\\r\\n        Pending,     // 0 - Payment initiated but not completed\\r\\n        Completed,   // 1 - Payment successfully completed\\r\\n        Failed,      // 2 - Payment failed\\r\\n        Refunded     // 3 - Payment was refunded\\r\\n    }\\r\\n    \\r\\n    // Receipt structure for on-chain payment records\\r\\n    struct Receipt {\\r\\n        bytes32 orderId;           // Unique order identifier\\r\\n        string vendorENS;          // Vendor's ENS name\\r\\n        address buyer;             // Buyer's address\\r\\n        address vendor;            // Vendor's address\\r\\n        uint256 amountGHS;         // Amount in GHS (for display)\\r\\n        uint256 amountUSDC;        // Amount in bUSDC (actual payment)\\r\\n        uint256 fxRate;            // Exchange rate used (GHS to USDC)\\r\\n        uint256 timestamp;         // Payment timestamp\\r\\n        PaymentType paymentType;   // Type of payment\\r\\n        PaymentStatus status;      // Payment status\\r\\n        string metadata;           // Additional metadata (JSON string)\\r\\n    }\\r\\n    \\r\\n    // State variables\\r\\n    bUSDC public busdcToken;\\r\\n    VendorRegistry public vendorRegistry;\\r\\n    \\r\\n    // Exchange rate management\\r\\n    uint256 public currentFxRate = 1e6; // 1 GHS = 1 USDC (6 decimals) - default rate\\r\\n    address public fxRateUpdater; // Address allowed to update exchange rates\\r\\n    \\r\\n    // Fee structure\\r\\n    uint256 public platformFeeBps = 25; // 0.25% platform fee (25 basis points)\\r\\n    address public feeRecipient; // Address to receive platform fees\\r\\n    \\r\\n    // Payment tracking\\r\\n    mapping(bytes32 => Receipt) public receipts; // orderId -> Receipt\\r\\n    mapping(address => bytes32[]) public userReceipts; // user -> array of orderIds\\r\\n    mapping(address => uint256) public vendorEarnings; // vendor -> total earnings\\r\\n    \\r\\n    // Order ID generation\\r\\n    uint256 private orderCounter = 0;\\r\\n    \\r\\n    // Events\\r\\n    event PaymentInitiated(\\r\\n        bytes32 indexed orderId,\\r\\n        address indexed buyer,\\r\\n        address indexed vendor,\\r\\n        uint256 amountUSDC,\\r\\n        PaymentType paymentType\\r\\n    );\\r\\n    \\r\\n    event PaymentCompleted(\\r\\n        bytes32 indexed orderId,\\r\\n        address indexed buyer,\\r\\n        address indexed vendor,\\r\\n        uint256 amountUSDC,\\r\\n        uint256 platformFee,\\r\\n        uint256 vendorAmount\\r\\n    );\\r\\n    \\r\\n    event PaymentFailed(\\r\\n        bytes32 indexed orderId,\\r\\n        address indexed buyer,\\r\\n        address indexed vendor,\\r\\n        string reason\\r\\n    );\\r\\n    \\r\\n    event PaymentRefunded(\\r\\n        bytes32 indexed orderId,\\r\\n        address indexed buyer,\\r\\n        address indexed vendor,\\r\\n        uint256 amountUSDC\\r\\n    );\\r\\n    \\r\\n    event ExchangeRateUpdated(uint256 oldRate, uint256 newRate);\\r\\n    event PlatformFeeUpdated(uint256 oldFee, uint256 newFee);\\r\\n    event FeeRecipientUpdated(address oldRecipient, address newRecipient);\\r\\n    \\r\\n    // Modifiers\\r\\n    modifier onlyActiveVendor(address vendor) {\\r\\n        require(vendorRegistry.isActiveVendor(vendor), \\\"PaymentRouter: Vendor not active\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyFxRateUpdater() {\\r\\n        require(msg.sender == fxRateUpdater || msg.sender == owner(), \\\"PaymentRouter: Not authorized to update exchange rate\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier validOrderId(bytes32 orderId) {\\r\\n        require(receipts[orderId].orderId != bytes32(0), \\\"PaymentRouter: Invalid order ID\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(\\r\\n        address _busdcToken,\\r\\n        address _vendorRegistry,\\r\\n        address _feeRecipient\\r\\n    ) Ownable(msg.sender) {\\r\\n        busdcToken = bUSDC(_busdcToken);\\r\\n        vendorRegistry = VendorRegistry(_vendorRegistry);\\r\\n        feeRecipient = _feeRecipient;\\r\\n        fxRateUpdater = msg.sender;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Initiate a Quick Pay transaction\\r\\n     * @param vendor Vendor's address\\r\\n     * @param amountGHS Amount in GHS\\r\\n     * @return orderId Generated order ID\\r\\n     */\\r\\n    function initiateQuickPay(\\r\\n        address vendor,\\r\\n        uint256 amountGHS\\r\\n    ) external onlyActiveVendor(vendor) whenNotPaused returns (bytes32 orderId) {\\r\\n        uint256 amountUSDC = (amountGHS * currentFxRate) / 1e6;\\r\\n        require(amountUSDC > 0, \\\"PaymentRouter: Amount too small\\\");\\r\\n        \\r\\n        orderId = _generateOrderId();\\r\\n        \\r\\n        // Create receipt\\r\\n        receipts[orderId] = Receipt({\\r\\n            orderId: orderId,\\r\\n            vendorENS: _getVendorENS(vendor),\\r\\n            buyer: msg.sender,\\r\\n            vendor: vendor,\\r\\n            amountGHS: amountGHS,\\r\\n            amountUSDC: amountUSDC,\\r\\n            fxRate: currentFxRate,\\r\\n            timestamp: block.timestamp,\\r\\n            paymentType: PaymentType.QuickPay,\\r\\n            status: PaymentStatus.Pending,\\r\\n            metadata: \\\"\\\"\\r\\n        });\\r\\n        \\r\\n        userReceipts[msg.sender].push(orderId);\\r\\n        userReceipts[vendor].push(orderId);\\r\\n        \\r\\n        emit PaymentInitiated(orderId, msg.sender, vendor, amountUSDC, PaymentType.QuickPay);\\r\\n        \\r\\n        return orderId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Initiate an Invoice Pay transaction with metadata\\r\\n     * @param vendor Vendor's address\\r\\n     * @param amountGHS Amount in GHS\\r\\n     * @param metadata JSON string with invoice details\\r\\n     * @return orderId Generated order ID\\r\\n     */\\r\\n    function initiateInvoicePay(\\r\\n        address vendor,\\r\\n        uint256 amountGHS,\\r\\n        string memory metadata\\r\\n    ) external onlyActiveVendor(vendor) whenNotPaused returns (bytes32 orderId) {\\r\\n        uint256 amountUSDC = (amountGHS * currentFxRate) / 1e6;\\r\\n        require(amountUSDC > 0, \\\"PaymentRouter: Amount too small\\\");\\r\\n        require(bytes(metadata).length > 0, \\\"PaymentRouter: Metadata cannot be empty\\\");\\r\\n        \\r\\n        orderId = _generateOrderId();\\r\\n        \\r\\n        // Create receipt\\r\\n        receipts[orderId] = Receipt({\\r\\n            orderId: orderId,\\r\\n            vendorENS: _getVendorENS(vendor),\\r\\n            buyer: msg.sender,\\r\\n            vendor: vendor,\\r\\n            amountGHS: amountGHS,\\r\\n            amountUSDC: amountUSDC,\\r\\n            fxRate: currentFxRate,\\r\\n            timestamp: block.timestamp,\\r\\n            paymentType: PaymentType.InvoicePay,\\r\\n            status: PaymentStatus.Pending,\\r\\n            metadata: metadata\\r\\n        });\\r\\n        \\r\\n        userReceipts[msg.sender].push(orderId);\\r\\n        userReceipts[vendor].push(orderId);\\r\\n        \\r\\n        emit PaymentInitiated(orderId, msg.sender, vendor, amountUSDC, PaymentType.InvoicePay);\\r\\n        \\r\\n        return orderId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Complete a payment by transferring bUSDC tokens\\r\\n     * @param orderId Order ID to complete\\r\\n     */\\r\\n    function completePayment(bytes32 orderId) external nonReentrant validOrderId(orderId) {\\r\\n        Receipt storage receipt = receipts[orderId];\\r\\n        require(receipt.status == PaymentStatus.Pending, \\\"PaymentRouter: Payment not pending\\\");\\r\\n        require(receipt.buyer == msg.sender, \\\"PaymentRouter: Only buyer can complete payment\\\");\\r\\n        \\r\\n        // Check buyer has sufficient balance\\r\\n        require(\\r\\n            busdcToken.balanceOf(msg.sender) >= receipt.amountUSDC,\\r\\n            \\\"PaymentRouter: Insufficient bUSDC balance\\\"\\r\\n        );\\r\\n        \\r\\n        // Calculate fees\\r\\n        uint256 platformFee = (receipt.amountUSDC * platformFeeBps) / 10000;\\r\\n        uint256 vendorAmount = receipt.amountUSDC - platformFee;\\r\\n        \\r\\n        // Transfer tokens\\r\\n        require(\\r\\n            busdcToken.transferFrom(msg.sender, address(this), receipt.amountUSDC),\\r\\n            \\\"PaymentRouter: Transfer failed\\\"\\r\\n        );\\r\\n        \\r\\n        // Distribute payment\\r\\n        if (platformFee > 0) {\\r\\n            require(\\r\\n                busdcToken.transfer(feeRecipient, platformFee),\\r\\n                \\\"PaymentRouter: Fee transfer failed\\\"\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        require(\\r\\n            busdcToken.transfer(receipt.vendor, vendorAmount),\\r\\n            \\\"PaymentRouter: Vendor transfer failed\\\"\\r\\n        );\\r\\n        \\r\\n        // Update receipt and vendor earnings\\r\\n        receipt.status = PaymentStatus.Completed;\\r\\n        vendorEarnings[receipt.vendor] += vendorAmount;\\r\\n        \\r\\n        emit PaymentCompleted(orderId, receipt.buyer, receipt.vendor, receipt.amountUSDC, platformFee, vendorAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Mark a payment as failed (admin or vendor only)\\r\\n     * @param orderId Order ID to mark as failed\\r\\n     * @param reason Reason for failure\\r\\n     */\\r\\n    function markPaymentFailed(bytes32 orderId, string memory reason) external validOrderId(orderId) {\\r\\n        Receipt storage receipt = receipts[orderId];\\r\\n        require(receipt.status == PaymentStatus.Pending, \\\"PaymentRouter: Payment not pending\\\");\\r\\n        require(\\r\\n            msg.sender == receipt.vendor || msg.sender == owner(),\\r\\n            \\\"PaymentRouter: Only vendor or admin can mark as failed\\\"\\r\\n        );\\r\\n        \\r\\n        receipt.status = PaymentStatus.Failed;\\r\\n        \\r\\n        emit PaymentFailed(orderId, receipt.buyer, receipt.vendor, reason);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Refund a completed payment (admin only)\\r\\n     * @param orderId Order ID to refund\\r\\n     */\\r\\n    function refundPayment(bytes32 orderId) external onlyOwner validOrderId(orderId) nonReentrant {\\r\\n        Receipt storage receipt = receipts[orderId];\\r\\n        require(receipt.status == PaymentStatus.Completed, \\\"PaymentRouter: Payment not completed\\\");\\r\\n        \\r\\n        // Calculate refund amount (full amount, fees are not refunded)\\r\\n        uint256 refundAmount = receipt.amountUSDC;\\r\\n        \\r\\n        // Transfer refund to buyer\\r\\n        require(\\r\\n            busdcToken.transfer(receipt.buyer, refundAmount),\\r\\n            \\\"PaymentRouter: Refund transfer failed\\\"\\r\\n        );\\r\\n        \\r\\n        // Update receipt and vendor earnings\\r\\n        receipt.status = PaymentStatus.Refunded;\\r\\n        vendorEarnings[receipt.vendor] -= refundAmount;\\r\\n        \\r\\n        emit PaymentRefunded(orderId, receipt.buyer, receipt.vendor, refundAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update exchange rate (GHS to USDC)\\r\\n     * @param newRate New exchange rate (6 decimals)\\r\\n     */\\r\\n    function updateExchangeRate(uint256 newRate) external onlyFxRateUpdater {\\r\\n        require(newRate > 0, \\\"PaymentRouter: Exchange rate must be positive\\\");\\r\\n        \\r\\n        uint256 oldRate = currentFxRate;\\r\\n        currentFxRate = newRate;\\r\\n        \\r\\n        emit ExchangeRateUpdated(oldRate, newRate);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update platform fee\\r\\n     * @param newFeeBps New fee in basis points (100 = 1%)\\r\\n     */\\r\\n    function updatePlatformFee(uint256 newFeeBps) external onlyOwner {\\r\\n        require(newFeeBps <= 1000, \\\"PaymentRouter: Fee cannot exceed 10%\\\");\\r\\n        \\r\\n        uint256 oldFee = platformFeeBps;\\r\\n        platformFeeBps = newFeeBps;\\r\\n        \\r\\n        emit PlatformFeeUpdated(oldFee, newFeeBps);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update fee recipient\\r\\n     * @param newRecipient New fee recipient address\\r\\n     */\\r\\n    function updateFeeRecipient(address newRecipient) external onlyOwner {\\r\\n        require(newRecipient != address(0), \\\"PaymentRouter: Fee recipient cannot be zero address\\\");\\r\\n        \\r\\n        address oldRecipient = feeRecipient;\\r\\n        feeRecipient = newRecipient;\\r\\n        \\r\\n        emit FeeRecipientUpdated(oldRecipient, newRecipient);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update FX rate updater address\\r\\n     * @param newUpdater New FX rate updater address\\r\\n     */\\r\\n    function updateFxRateUpdater(address newUpdater) external onlyOwner {\\r\\n        require(newUpdater != address(0), \\\"PaymentRouter: FX rate updater cannot be zero address\\\");\\r\\n        fxRateUpdater = newUpdater;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get receipt by order ID\\r\\n     * @param orderId Order ID to query\\r\\n     * @return receipt Receipt struct\\r\\n     */\\r\\n    function getReceipt(bytes32 orderId) external view validOrderId(orderId) returns (Receipt memory receipt) {\\r\\n        return receipts[orderId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get user's receipt IDs\\r\\n     * @param user User address\\r\\n     * @param offset Starting index\\r\\n     * @param limit Maximum number of receipts to return\\r\\n     * @return orderIds Array of order IDs\\r\\n     */\\r\\n    function getUserReceipts(\\r\\n        address user,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (bytes32[] memory orderIds) {\\r\\n        bytes32[] storage userReceiptList = userReceipts[user];\\r\\n        require(offset < userReceiptList.length, \\\"PaymentRouter: Offset out of bounds\\\");\\r\\n        \\r\\n        uint256 end = offset + limit;\\r\\n        if (end > userReceiptList.length) {\\r\\n            end = userReceiptList.length;\\r\\n        }\\r\\n        \\r\\n        bytes32[] memory result = new bytes32[](end - offset);\\r\\n        for (uint256 i = offset; i < end; i++) {\\r\\n            result[i - offset] = userReceiptList[i];\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get vendor's total earnings\\r\\n     * @param vendor Vendor address\\r\\n     * @return earnings Total earnings in bUSDC\\r\\n     */\\r\\n    function getVendorEarnings(address vendor) external view returns (uint256 earnings) {\\r\\n        return vendorEarnings[vendor];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculate amount in USDC from GHS\\r\\n     * @param amountGHS Amount in GHS\\r\\n     * @return amountUSDC Amount in bUSDC\\r\\n     */\\r\\n    function calculateUSDCAmount(uint256 amountGHS) external view returns (uint256 amountUSDC) {\\r\\n        return (amountGHS * currentFxRate) / 1e6;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Generate unique order ID\\r\\n     * @return orderId Generated order ID\\r\\n     */\\r\\n    function _generateOrderId() internal returns (bytes32 orderId) {\\r\\n        orderCounter++;\\r\\n        return keccak256(abi.encodePacked(\\r\\n            block.timestamp,\\r\\n            block.number,\\r\\n            msg.sender,\\r\\n            orderCounter\\r\\n        ));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get vendor's ENS name\\r\\n     * @param vendor Vendor address\\r\\n     * @return ensName Vendor's ENS name\\r\\n     */\\r\\n    function _getVendorENS(address vendor) internal view returns (string memory ensName) {\\r\\n        VendorRegistry.VendorProfile memory profile = vendorRegistry.getVendorProfile(vendor);\\r\\n        return profile.ensName;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pause the contract (admin only)\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Unpause the contract (admin only)\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Emergency withdraw (admin only)\\r\\n     * @param token Token address to withdraw (0 for ETH)\\r\\n     * @param amount Amount to withdraw (0 for all)\\r\\n     */\\r\\n    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {\\r\\n        if (token == address(0)) {\\r\\n            // Withdraw ETH\\r\\n            uint256 ethAmount = amount == 0 ? address(this).balance : amount;\\r\\n            require(ethAmount > 0, \\\"PaymentRouter: No ETH to withdraw\\\");\\r\\n            \\r\\n            (bool success, ) = payable(owner()).call{value: ethAmount}(\\\"\\\");\\r\\n            require(success, \\\"PaymentRouter: ETH withdrawal failed\\\");\\r\\n        } else {\\r\\n            // Withdraw ERC20 tokens\\r\\n            require(token == address(busdcToken), \\\"PaymentRouter: Can only withdraw bUSDC\\\");\\r\\n            \\r\\n            uint256 tokenAmount = amount == 0 ? busdcToken.balanceOf(address(this)) : amount;\\r\\n            require(tokenAmount > 0, \\\"PaymentRouter: No tokens to withdraw\\\");\\r\\n            \\r\\n            require(busdcToken.transfer(owner(), tokenAmount), \\\"PaymentRouter: Token withdrawal failed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x84df7ec7199587af78c57be8a4b04193ed3830ae3fd961bb2915ba89a92be1bc\",\"license\":\"MIT\"},\"contracts/VendorRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title VendorRegistry\\r\\n * @dev Registry for managing vendor profiles and verification status\\r\\n * Stores vendor information including ENS names, phone verification, EFP verification, and EFPas scores\\r\\n */\\r\\ncontract VendorRegistry is Ownable, Pausable {\\r\\n    // Vendor status enum\\r\\n    enum VendorStatus {\\r\\n        Pending,    // 0 - Vendor registered but not approved\\r\\n        Active,     // 1 - Vendor approved and active\\r\\n        Suspended,  // 2 - Vendor suspended by admin\\r\\n        Rejected    // 3 - Vendor registration rejected\\r\\n    }\\r\\n    \\r\\n    // Vendor profile structure\\r\\n    struct VendorProfile {\\r\\n        address wallet;           // Vendor's wallet address\\r\\n        string ensName;          // ENS subname (e.g., \\\"business.tapngo.eth\\\")\\r\\n        string businessName;     // Business display name\\r\\n        string phoneHash;        // Hashed phone number for verification\\r\\n        bool phoneVerified;      // Phone verification status\\r\\n        bool efpVerified;        // Ethereum Follow Protocol verification\\r\\n        uint256 efpasScore;      // EFPas reputation score (0 if not available)\\r\\n        VendorStatus status;     // Current vendor status\\r\\n        uint256 registrationTime; // Timestamp of registration\\r\\n        uint256 lastUpdated;     // Timestamp of last profile update\\r\\n    }\\r\\n    \\r\\n    // State variables\\r\\n    mapping(address => VendorProfile) public vendors;\\r\\n    mapping(string => address) public ensToVendor; // ENS name -> vendor address\\r\\n    mapping(string => bool) public usedPhoneHashes; // Track used phone hashes\\r\\n    address[] public vendorAddresses; // Array of all vendor addresses\\r\\n    \\r\\n    // Verification requirements\\r\\n    bool public requirePhoneVerification = true;\\r\\n    bool public requireEFPVerification = true;\\r\\n    uint256 public minEFPasScore = 0; // Minimum EFPas score required (0 = not required)\\r\\n    \\r\\n    // Events\\r\\n    event VendorRegistered(\\r\\n        address indexed vendor,\\r\\n        string ensName,\\r\\n        string businessName,\\r\\n        string phoneHash\\r\\n    );\\r\\n    \\r\\n    event VendorApproved(address indexed vendor, string ensName);\\r\\n    event VendorSuspended(address indexed vendor, string reason);\\r\\n    event VendorRejected(address indexed vendor, string reason);\\r\\n    event VendorUpdated(address indexed vendor, string field);\\r\\n    event PhoneVerified(address indexed vendor, string phoneHash);\\r\\n    event EFPVerified(address indexed vendor, bool verified);\\r\\n    event EFPasScoreUpdated(address indexed vendor, uint256 score);\\r\\n    \\r\\n    // Modifiers\\r\\n    modifier onlyVendor() {\\r\\n        require(vendors[msg.sender].wallet != address(0), \\\"VendorRegistry: Not a registered vendor\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyActiveVendor() {\\r\\n        require(\\r\\n            vendors[msg.sender].wallet != address(0) && \\r\\n            vendors[msg.sender].status == VendorStatus.Active,\\r\\n            \\\"VendorRegistry: Not an active vendor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner(), \\\"VendorRegistry: Only admin can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor() Ownable(msg.sender) {}\\r\\n    \\r\\n    /**\\r\\n     * @dev Register a new vendor\\r\\n     * @param ensName ENS subname for the vendor (e.g., \\\"business.tapngo.eth\\\")\\r\\n     * @param businessName Display name of the business\\r\\n     * @param phoneHash Hashed phone number\\r\\n     */\\r\\n    function registerVendor(\\r\\n        string memory ensName,\\r\\n        string memory businessName,\\r\\n        string memory phoneHash\\r\\n    ) external whenNotPaused {\\r\\n        require(vendors[msg.sender].wallet == address(0), \\\"VendorRegistry: Vendor already registered\\\");\\r\\n        require(bytes(ensName).length > 0, \\\"VendorRegistry: ENS name cannot be empty\\\");\\r\\n        require(bytes(businessName).length > 0, \\\"VendorRegistry: Business name cannot be empty\\\");\\r\\n        require(bytes(phoneHash).length > 0, \\\"VendorRegistry: Phone hash cannot be empty\\\");\\r\\n        require(ensToVendor[ensName] == address(0), \\\"VendorRegistry: ENS name already taken\\\");\\r\\n        require(!usedPhoneHashes[phoneHash], \\\"VendorRegistry: Phone number already used\\\");\\r\\n        \\r\\n        // Create vendor profile\\r\\n        VendorProfile memory newVendor = VendorProfile({\\r\\n            wallet: msg.sender,\\r\\n            ensName: ensName,\\r\\n            businessName: businessName,\\r\\n            phoneHash: phoneHash,\\r\\n            phoneVerified: false,\\r\\n            efpVerified: false,\\r\\n            efpasScore: 0,\\r\\n            status: VendorStatus.Pending,\\r\\n            registrationTime: block.timestamp,\\r\\n            lastUpdated: block.timestamp\\r\\n        });\\r\\n        \\r\\n        vendors[msg.sender] = newVendor;\\r\\n        ensToVendor[ensName] = msg.sender;\\r\\n        usedPhoneHashes[phoneHash] = true;\\r\\n        vendorAddresses.push(msg.sender);\\r\\n        \\r\\n        emit VendorRegistered(msg.sender, ensName, businessName, phoneHash);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Approve a vendor (admin only)\\r\\n     * @param vendorAddress Address of the vendor to approve\\r\\n     */\\r\\n    function approveVendor(address vendorAddress) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Pending, \\\"VendorRegistry: Vendor not pending\\\");\\r\\n        \\r\\n        // Check verification requirements\\r\\n        if (requirePhoneVerification) {\\r\\n            require(vendors[vendorAddress].phoneVerified, \\\"VendorRegistry: Phone verification required\\\");\\r\\n        }\\r\\n        if (requireEFPVerification) {\\r\\n            require(vendors[vendorAddress].efpVerified, \\\"VendorRegistry: EFP verification required\\\");\\r\\n        }\\r\\n        if (minEFPasScore > 0) {\\r\\n            require(vendors[vendorAddress].efpasScore >= minEFPasScore, \\\"VendorRegistry: EFPas score too low\\\");\\r\\n        }\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Active;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorApproved(vendorAddress, vendors[vendorAddress].ensName);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Suspend a vendor (admin only)\\r\\n     * @param vendorAddress Address of the vendor to suspend\\r\\n     * @param reason Reason for suspension\\r\\n     */\\r\\n    function suspendVendor(address vendorAddress, string memory reason) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Active, \\\"VendorRegistry: Vendor not active\\\");\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Suspended;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorSuspended(vendorAddress, reason);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Reject a vendor registration (admin only)\\r\\n     * @param vendorAddress Address of the vendor to reject\\r\\n     * @param reason Reason for rejection\\r\\n     */\\r\\n    function rejectVendor(address vendorAddress, string memory reason) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Pending, \\\"VendorRegistry: Vendor not pending\\\");\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Rejected;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorRejected(vendorAddress, reason);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's phone verification status (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param verified Verification status\\r\\n     */\\r\\n    function updatePhoneVerification(address vendorAddress, bool verified) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].phoneVerified = verified;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit PhoneVerified(vendorAddress, vendors[vendorAddress].phoneHash);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's EFP verification status (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param verified Verification status\\r\\n     */\\r\\n    function updateEFPVerification(address vendorAddress, bool verified) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].efpVerified = verified;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit EFPVerified(vendorAddress, verified);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's EFPas score (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param score EFPas reputation score\\r\\n     */\\r\\n    function updateEFPasScore(address vendorAddress, uint256 score) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].efpasScore = score;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit EFPasScoreUpdated(vendorAddress, score);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update business name (vendor only)\\r\\n     * @param newBusinessName New business name\\r\\n     */\\r\\n    function updateBusinessName(string memory newBusinessName) external onlyVendor {\\r\\n        require(bytes(newBusinessName).length > 0, \\\"VendorRegistry: Business name cannot be empty\\\");\\r\\n        \\r\\n        vendors[msg.sender].businessName = newBusinessName;\\r\\n        vendors[msg.sender].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorUpdated(msg.sender, \\\"businessName\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get vendor profile by address\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @return profile Vendor profile struct\\r\\n     */\\r\\n    function getVendorProfile(address vendorAddress) external view returns (VendorProfile memory profile) {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        return vendors[vendorAddress];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get vendor address by ENS name\\r\\n     * @param ensName ENS name to look up\\r\\n     * @return vendorAddress Address of the vendor\\r\\n     */\\r\\n    function getVendorByENS(string memory ensName) external view returns (address vendorAddress) {\\r\\n        return ensToVendor[ensName];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if an address is a registered vendor\\r\\n     * @param vendorAddress Address to check\\r\\n     * @return isRegistered True if address is a registered vendor\\r\\n     */\\r\\n    function isVendor(address vendorAddress) external view returns (bool isRegistered) {\\r\\n        return vendors[vendorAddress].wallet != address(0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if a vendor is active\\r\\n     * @param vendorAddress Address to check\\r\\n     * @return isActive True if vendor is active\\r\\n     */\\r\\n    function isActiveVendor(address vendorAddress) external view returns (bool isActive) {\\r\\n        return vendors[vendorAddress].wallet != address(0) && \\r\\n               vendors[vendorAddress].status == VendorStatus.Active;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get total number of registered vendors\\r\\n     * @return count Total number of vendors\\r\\n     */\\r\\n    function getVendorCount() external view returns (uint256 count) {\\r\\n        return vendorAddresses.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all vendor addresses (for pagination)\\r\\n     * @param offset Starting index\\r\\n     * @param limit Maximum number of addresses to return\\r\\n     * @return addresses Array of vendor addresses\\r\\n     */\\r\\n    function getVendorAddresses(uint256 offset, uint256 limit) external view returns (address[] memory addresses) {\\r\\n        require(offset < vendorAddresses.length, \\\"VendorRegistry: Offset out of bounds\\\");\\r\\n        \\r\\n        uint256 end = offset + limit;\\r\\n        if (end > vendorAddresses.length) {\\r\\n            end = vendorAddresses.length;\\r\\n        }\\r\\n        \\r\\n        address[] memory result = new address[](end - offset);\\r\\n        for (uint256 i = offset; i < end; i++) {\\r\\n            result[i - offset] = vendorAddresses[i];\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update verification requirements (admin only)\\r\\n     * @param phoneRequired Whether phone verification is required\\r\\n     * @param efpRequired Whether EFP verification is required\\r\\n     * @param minScore Minimum EFPas score required\\r\\n     */\\r\\n    function updateVerificationRequirements(\\r\\n        bool phoneRequired,\\r\\n        bool efpRequired,\\r\\n        uint256 minScore\\r\\n    ) external onlyAdmin {\\r\\n        requirePhoneVerification = phoneRequired;\\r\\n        requireEFPVerification = efpRequired;\\r\\n        minEFPasScore = minScore;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pause the contract (admin only)\\r\\n     */\\r\\n    function pause() external onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Unpause the contract (admin only)\\r\\n     */\\r\\n    function unpause() external onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd489b176a6aaa264ba089ce8665709ea750694f864c54727aefa5aa8f5d6497a\",\"license\":\"MIT\"},\"contracts/bUSDC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title bUSDC - Base USDC Test Token\\r\\n * @dev A mintable ERC20 token for testing Tap&Go Pay on Base Sepolia\\r\\n * This is a test stablecoin that simulates USDC functionality\\r\\n */\\r\\ncontract bUSDC is ERC20, Ownable, Pausable {\\r\\n    // Maximum supply for the test token (1 billion tokens)\\r\\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10**6; // 6 decimals like real USDC\\r\\n    \\r\\n    // Faucet limits\\r\\n    uint256 public constant FAUCET_AMOUNT = 1000 * 10**6; // 1000 tokens per faucet\\r\\n    uint256 public constant FAUCET_COOLDOWN = 24 hours; // 24 hour cooldown between faucet claims\\r\\n    \\r\\n    // Mapping to track last faucet claim time per address\\r\\n    mapping(address => uint256) public lastFaucetClaim;\\r\\n    \\r\\n    // Events\\r\\n    event FaucetClaimed(address indexed user, uint256 amount);\\r\\n    event TokensMinted(address indexed to, uint256 amount);\\r\\n    event TokensBurned(address indexed from, uint256 amount);\\r\\n    \\r\\n    constructor() ERC20(\\\"Base USDC Test\\\", \\\"bUSDC\\\") Ownable(msg.sender) {\\r\\n        // Mint initial supply to deployer for testing\\r\\n        _mint(msg.sender, 100_000 * 10**6); // 100k tokens\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Mint tokens to a specific address (only owner)\\r\\n     * @param to Address to mint tokens to\\r\\n     * @param amount Amount of tokens to mint (in wei, 6 decimals)\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external onlyOwner {\\r\\n        require(totalSupply() + amount <= MAX_SUPPLY, \\\"bUSDC: Exceeds max supply\\\");\\r\\n        _mint(to, amount);\\r\\n        emit TokensMinted(to, amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Burn tokens from a specific address (only owner)\\r\\n     * @param from Address to burn tokens from\\r\\n     * @param amount Amount of tokens to burn (in wei, 6 decimals)\\r\\n     */\\r\\n    function burn(address from, uint256 amount) external onlyOwner {\\r\\n        _burn(from, amount);\\r\\n        emit TokensBurned(from, amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Faucet function - allows users to claim test tokens\\r\\n     * Users can claim once every 24 hours\\r\\n     */\\r\\n    function claimFaucet() external whenNotPaused {\\r\\n        require(\\r\\n            block.timestamp >= lastFaucetClaim[msg.sender] + FAUCET_COOLDOWN,\\r\\n            \\\"bUSDC: Faucet cooldown not expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply() + FAUCET_AMOUNT <= MAX_SUPPLY,\\r\\n            \\\"bUSDC: Faucet would exceed max supply\\\"\\r\\n        );\\r\\n        \\r\\n        lastFaucetClaim[msg.sender] = block.timestamp;\\r\\n        _mint(msg.sender, FAUCET_AMOUNT);\\r\\n        \\r\\n        emit FaucetClaimed(msg.sender, FAUCET_AMOUNT);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if an address can claim from faucet\\r\\n     * @param user Address to check\\r\\n     * @return canClaim True if user can claim from faucet\\r\\n     * @return timeUntilClaim Time until next claim is available (0 if can claim now)\\r\\n     */\\r\\n    function canClaimFaucet(address user) external view returns (bool canClaim, uint256 timeUntilClaim) {\\r\\n        uint256 lastClaim = lastFaucetClaim[user];\\r\\n        uint256 nextClaimTime = lastClaim + FAUCET_COOLDOWN;\\r\\n        \\r\\n        if (block.timestamp >= nextClaimTime) {\\r\\n            canClaim = true;\\r\\n            timeUntilClaim = 0;\\r\\n        } else {\\r\\n            canClaim = false;\\r\\n            timeUntilClaim = nextClaimTime - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pause the contract (only owner)\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Unpause the contract (only owner)\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Override transfer to respect pause state\\r\\n     */\\r\\n    function _update(address from, address to, uint256 value) internal override whenNotPaused {\\r\\n        super._update(from, to, value);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the number of decimals for this token (6, like real USDC)\\r\\n     */\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 6;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x04e5abd7bcb18455432e577bd972a43de6691031f8eee142fa2d2f55969ff216\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052620f424060045560196006556000600b553480156200002257600080fd5b5060405162002df138038062002df1833981016040819052620000459162000139565b33806200006c57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200007781620000cc565b5060018055600280546001600160a01b039485166001600160a01b0319918216179091556003805493851693821693909317909255600780549190931690821617909155600580549091163317905562000183565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013457600080fd5b919050565b6000806000606084860312156200014f57600080fd5b6200015a846200011c565b92506200016a602085016200011c565b91506200017a604085016200011c565b90509250925092565b612c5e80620001936000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638da5cb5b11610104578063d290dcfc116100a2578063ef6cf04d11610071578063ef6cf04d146103df578063f160d36914610409578063f2fde38b1461041c578063fcecbb611461042f57600080fd5b8063d290dcfc14610386578063de8f8b3f14610399578063df867859146103ac578063ee5ac03e146103bf57600080fd5b80639aadf60a116100de5780639aadf60a1461033a578063a843c5fe1461034d578063aa0b598814610360578063b9e205ae1461037357600080fd5b80638da5cb5b146102ed5780638eefcf62146102fe57806395ccea671461032757600080fd5b806347ca8a8b11610171578063715018a61161014b578063715018a6146102aa5780638456cb59146102b25780638926e419146102ba5780638d420d13146102cd57600080fd5b806347ca8a8b146102675780634cabb8241461027a5780635c975abb1461028d57600080fd5b806322dcd13e116101ad57806322dcd13e14610230578063237e288a146102395780633f4ba83a1461024c578063469048401461025457600080fd5b8063012beac9146101d4578063155f82e9146102045780631ab154961461021b575b600080fd5b6003546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61020d60045481565b6040519081526020016101fb565b61022e61022936600461237e565b61044f565b005b61020d60065481565b61020d61024736600461248a565b6104f2565b61022e610876565b6007546101e7906001600160a01b031681565b61022e6102753660046124e3565b610888565b61020d6102883660046124e3565b610dac565b600054600160a01b900460ff1660405190151581526020016101fb565b61022e610dd0565b61022e610de2565b61020d6102c83660046124fc565b610df2565b6102e06102db366004612528565b61111a565b6040516101fb919061255d565b6000546001600160a01b03166101e7565b61020d61030c36600461237e565b6001600160a01b03166000908152600a602052604090205490565b61022e6103353660046124fc565b61126c565b61022e6103483660046125a1565b6115dc565b61020d61035b3660046124fc565b61174e565b61022e61036e3660046124e3565b61177f565b61022e6103813660046124e3565b61182b565b6002546101e7906001600160a01b031681565b61022e6103a73660046124e3565b61195c565b6005546101e7906001600160a01b031681565b61020d6103cd36600461237e565b600a6020526000908152604090205481565b6103f26103ed3660046124e3565b611b96565b6040516101fb9b9a99989796959493929190612672565b61022e61041736600461237e565b611d14565b61022e61042a36600461237e565b611de8565b61044261043d3660046124e3565b611e23565b6040516101fb9190612702565b610457612062565b6001600160a01b0381166104d05760405162461bcd60e51b815260206004820152603560248201527f5061796d656e74526f757465723a204658207261746520757064617465722063604482015274616e6e6f74206265207a65726f206164647265737360581b60648201526084015b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60035460405163353f20fd60e01b81526001600160a01b038086166004830152600092869291169063353f20fd90602401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056491906127eb565b6105b05760405162461bcd60e51b815260206004820181905260248201527f5061796d656e74526f757465723a2056656e646f72206e6f742061637469766560448201526064016104c7565b6105b861208f565b6000620f4240600454866105cc919061281c565b6105d69190612833565b9050600081116106285760405162461bcd60e51b815260206004820152601f60248201527f5061796d656e74526f757465723a20416d6f756e7420746f6f20736d616c6c0060448201526064016104c7565b60008451116106895760405162461bcd60e51b815260206004820152602760248201527f5061796d656e74526f757465723a204d657461646174612063616e6e6f7420626044820152666520656d70747960c81b60648201526084016104c7565b6106916120ba565b92506040518061016001604052808481526020016106ae8861212b565b81523360208201526001600160a01b0388166040820152606081018790526080810183905260045460a08201524260c082015260e00160018152602001600081526020908101869052600085815260088252604090208251815590820151600182019061071b90826128d7565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201805460ff1916600183818111156107a1576107a1612638565b021790555061012082015160088201805461ff0019166101008360038111156107cc576107cc612638565b021790555061014082015160098201906107e690826128d7565b5050336000818152600960209081526040808320805460018181018355918552838520018990556001600160a01b038c1680855282852080548084018255908652939094209092018890555191935086917fd1cbe362484d6d80f52e20672fd2e4b5579125af9908612b8bda8199d99f8bd19161086591879190612997565b60405180910390a450509392505050565b61087e612062565b6108866121ad565b565b610890612202565b60008181526008602052604090205481906108bd5760405162461bcd60e51b81526004016104c7906129ab565b6000828152600860205260408120906008820154610100900460ff1660038111156108ea576108ea612638565b146109075760405162461bcd60e51b81526004016104c7906129e2565b60028101546001600160a01b0316331461097a5760405162461bcd60e51b815260206004820152602e60248201527f5061796d656e74526f757465723a204f6e6c792062757965722063616e20636f60448201526d1b5c1b195d19481c185e5b595b9d60921b60648201526084016104c7565b60058101546002546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190612a24565b1015610a4b5760405162461bcd60e51b815260206004820152602960248201527f5061796d656e74526f757465723a20496e73756666696369656e742062555344604482015268432062616c616e636560b81b60648201526084016104c7565b60006127106006548360050154610a62919061281c565b610a6c9190612833565b90506000818360050154610a809190612a3d565b60025460058501546040516323b872dd60e01b815233600482015230602482015260448101919091529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0291906127eb565b610b4e5760405162461bcd60e51b815260206004820152601e60248201527f5061796d656e74526f757465723a205472616e73666572206661696c6564000060448201526064016104c7565b8115610c245760025460075460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb906044016020604051808303816000875af1158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd91906127eb565b610c245760405162461bcd60e51b815260206004820152602260248201527f5061796d656e74526f757465723a20466565207472616e73666572206661696c604482015261195960f21b60648201526084016104c7565b600254600384015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9f91906127eb565b610cf95760405162461bcd60e51b815260206004820152602560248201527f5061796d656e74526f757465723a2056656e646f72207472616e736665722066604482015264185a5b195960da1b60648201526084016104c7565b60088301805461ff00191661010017905560038301546001600160a01b03166000908152600a602052604081208054839290610d36908490612a50565b9091555050600383015460028401546005850154604080519182526020820186905281018490526001600160a01b03928316929091169087907fab776149fc023f3e5cafa5099ef7b7c5a5756789546721c3b359ef4e0f9005d99060600160405180910390a450505050610da960018055565b50565b6000620f424060045483610dc0919061281c565b610dca9190612833565b92915050565b610dd8612062565b610886600061222c565b610dea612062565b61088661227c565b60035460405163353f20fd60e01b81526001600160a01b038085166004830152600092859291169063353f20fd90602401602060405180830381865afa158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6491906127eb565b610eb05760405162461bcd60e51b815260206004820181905260248201527f5061796d656e74526f757465723a2056656e646f72206e6f742061637469766560448201526064016104c7565b610eb861208f565b6000620f424060045485610ecc919061281c565b610ed69190612833565b905060008111610f285760405162461bcd60e51b815260206004820152601f60248201527f5061796d656e74526f757465723a20416d6f756e7420746f6f20736d616c6c0060448201526064016104c7565b610f306120ba565b9250604051806101600160405280848152602001610f4d8761212b565b81523360208201526001600160a01b0387166040820152606081018690526080810183905260045460a08201524260c082015260e0016000815260200160008152604080516020818101835260008083529381019190915286835260088152912082518155908201516001820190610fc590826128d7565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201805460ff19166001838181111561104b5761104b612638565b021790555061012082015160088201805461ff00191661010083600381111561107657611076612638565b0217905550610140820151600982019061109090826128d7565b5050336000818152600960209081526040808320805460018181018355918552838520018990556001600160a01b038b16808552828520805492830181558552928420018890555190935086917fd1cbe362484d6d80f52e20672fd2e4b5579125af9908612b8bda8199d99f8bd19161110a918791612997565b60405180910390a4505092915050565b6001600160a01b038316600090815260096020526040902080546060919084106111925760405162461bcd60e51b815260206004820152602360248201527f5061796d656e74526f757465723a204f6666736574206f7574206f6620626f756044820152626e647360e81b60648201526084016104c7565b600061119e8486612a50565b82549091508111156111ae575080545b60006111ba8683612a3d565b67ffffffffffffffff8111156111d2576111d261239b565b6040519080825280602002602001820160405280156111fb578160200160208202803683370190505b509050855b8281101561125f5783818154811061121a5761121a612a63565b90600052602060002001548288836112329190612a3d565b8151811061124257611242612a63565b60209081029190910101528061125781612a79565b915050611200565b50925050505b9392505050565b611274612062565b6001600160a01b0382166113a357600081156112905781611292565b475b9050600081116112ee5760405162461bcd60e51b815260206004820152602160248201527f5061796d656e74526f757465723a204e6f2045544820746f20776974686472616044820152607760f81b60648201526084016104c7565b600080546040516001600160a01b039091169083908381818185875af1925050503d806000811461133b576040519150601f19603f3d011682016040523d82523d6000602084013e611340565b606091505b505090508061139d5760405162461bcd60e51b8152602060048201526024808201527f5061796d656e74526f757465723a20455448207769746864726177616c2066616044820152631a5b195960e21b60648201526084016104c7565b50505050565b6002546001600160a01b0383811691161461140f5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e74526f757465723a2043616e206f6e6c7920776974686472617760448201526520625553444360d01b60648201526084016104c7565b6000811561141d5781611489565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114899190612a24565b9050600081116114e75760405162461bcd60e51b8152602060048201526024808201527f5061796d656e74526f757465723a204e6f20746f6b656e7320746f20776974686044820152636472617760e01b60648201526084016104c7565b6002546001600160a01b031663a9059cbb61150a6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157b91906127eb565b6115d65760405162461bcd60e51b815260206004820152602660248201527f5061796d656e74526f757465723a20546f6b656e207769746864726177616c2060448201526519985a5b195960d21b60648201526084016104c7565b505b5050565b60008281526008602052604090205482906116095760405162461bcd60e51b81526004016104c7906129ab565b6000838152600860205260408120906008820154610100900460ff16600381111561163657611636612638565b146116535760405162461bcd60e51b81526004016104c7906129e2565b60038101546001600160a01b031633148061167857506000546001600160a01b031633145b6116e35760405162461bcd60e51b815260206004820152603660248201527f5061796d656e74526f757465723a204f6e6c792076656e646f72206f722061646044820152751b5a5b8818d85b881b585c9ac8185cc819985a5b195960521b60648201526084016104c7565b60088101805461ff001916610200179055600381015460028201546040516001600160a01b03928316929091169086907f7a2ea751754fe932d035d5b4731a6eb8f5d1571412b2f691a4440ff6a520a4e290611740908890612a92565b60405180910390a450505050565b6009602052816000526040600020818154811061176a57600080fd5b90600052602060002001600091509150505481565b611787612062565b6103e88111156117e55760405162461bcd60e51b8152602060048201526024808201527f5061796d656e74526f757465723a204665652063616e6e6f74206578636565646044820152632031302560e01b60648201526084016104c7565b600680549082905560408051828152602081018490527fd347e206f25a89b917fc9482f1a2d294d749baa4dc9bde7fb495ee11fe49164391015b60405180910390a15050565b6005546001600160a01b031633148061184e57506000546001600160a01b031633145b6118b85760405162461bcd60e51b815260206004820152603560248201527f5061796d656e74526f757465723a204e6f7420617574686f72697a656420746f604482015274207570646174652065786368616e6765207261746560581b60648201526084016104c7565b6000811161191e5760405162461bcd60e51b815260206004820152602d60248201527f5061796d656e74526f757465723a2045786368616e67652072617465206d757360448201526c7420626520706f73697469766560981b60648201526084016104c7565b600480549082905560408051828152602081018490527fc8d1043f24843c0a1c9251fdc30017d84e87498fbcf232af9f86816b5e182bde910161181f565b611964612062565b60008181526008602052604090205481906119915760405162461bcd60e51b81526004016104c7906129ab565b611999612202565b600082815260086020526040902060016008820154610100900460ff1660038111156119c7576119c7612638565b14611a205760405162461bcd60e51b8152602060048201526024808201527f5061796d656e74526f757465723a205061796d656e74206e6f7420636f6d706c604482015263195d195960e21b60648201526084016104c7565b6005810154600280549083015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa091906127eb565b611afa5760405162461bcd60e51b815260206004820152602560248201527f5061796d656e74526f757465723a20526566756e64207472616e736665722066604482015264185a5b195960da1b60648201526084016104c7565b60088201805461ff00191661030017905560038201546001600160a01b03166000908152600a602052604081208054839290611b37908490612a3d565b9091555050600382015460028301546040518381526001600160a01b03928316929091169086907f42b8ba31338f985ac11f6eaa31356b5cbd8eaa2f7f01e453369f02f1cf234b989060200160405180910390a450506115d860018055565b60086020526000908152604090208054600182018054919291611bb890612855565b80601f0160208091040260200160405190810160405280929190818152602001828054611be490612855565b8015611c315780601f10611c0657610100808354040283529160200191611c31565b820191906000526020600020905b815481529060010190602001808311611c1457829003601f168201915b50505060028401546003850154600486015460058701546006880154600789015460088a015460098b0180549a9b6001600160a01b039889169b97909816995094975092959194909360ff808516946101009004169291611c9190612855565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbd90612855565b8015611d0a5780601f10611cdf57610100808354040283529160200191611d0a565b820191906000526020600020905b815481529060010190602001808311611ced57829003601f168201915b505050505090508b565b611d1c612062565b6001600160a01b038116611d8e5760405162461bcd60e51b815260206004820152603360248201527f5061796d656e74526f757465723a2046656520726563697069656e742063616e6044820152726e6f74206265207a65726f206164647265737360681b60648201526084016104c7565b600780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527faaebcf1bfa00580e41d966056b48521fa9f202645c86d4ddf28113e617c1b1d3910161181f565b611df0612062565b6001600160a01b038116611e1a57604051631e4fbdf760e01b8152600060048201526024016104c7565b610da98161222c565b611e2b6122e9565b6000828152600860205260409020548290611e585760405162461bcd60e51b81526004016104c7906129ab565b600860008481526020019081526020016000206040518061016001604052908160008201548152602001600182018054611e9190612855565b80601f0160208091040260200160405190810160405280929190818152602001828054611ebd90612855565b8015611f0a5780601f10611edf57610100808354040283529160200191611f0a565b820191906000526020600020905b815481529060010190602001808311611eed57829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e09091019060ff166001811115611f7957611f79612638565b6001811115611f8a57611f8a612638565b81526020016008820160019054906101000a900460ff166003811115611fb257611fb2612638565b6003811115611fc357611fc3612638565b8152602001600982018054611fd790612855565b80601f016020809104026020016040519081016040528092919081815260200182805461200390612855565b80156120505780601f1061202557610100808354040283529160200191612050565b820191906000526020600020905b81548152906001019060200180831161203357829003601f168201915b50505050508152505091505b50919050565b6000546001600160a01b031633146108865760405163118cdaa760e01b81523360048201526024016104c7565b600054600160a01b900460ff16156108865760405163d93c066560e01b815260040160405180910390fd5b600b8054600091826120cb83612a79565b9091555050600b5460405161211091429143913391602001938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60405160208183030381529060405280519060200120905090565b600354604051635480df8960e01b81526001600160a01b038381166004830152606092600092911690635480df8990602401600060405180830381865afa15801561217a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121a29190810190612b0c565b602001519392505050565b6121b56122bf565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60026001540361222557604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61228461208f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121e53390565b600054600160a01b900460ff1661088657604051638dfc202b60e01b815260040160405180910390fd5b604051806101600160405280600080191681526020016060815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000600181111561235557612355612638565b815260200160008152602001606081525090565b6001600160a01b0381168114610da957600080fd5b60006020828403121561239057600080fd5b813561126581612369565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156123d5576123d561239b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156124045761240461239b565b604052919050565b600067ffffffffffffffff8211156124265761242661239b565b50601f01601f191660200190565b600082601f83011261244557600080fd5b81356124586124538261240c565b6123db565b81815284602083860101111561246d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561249f57600080fd5b83356124aa81612369565b925060208401359150604084013567ffffffffffffffff8111156124cd57600080fd5b6124d986828701612434565b9150509250925092565b6000602082840312156124f557600080fd5b5035919050565b6000806040838503121561250f57600080fd5b823561251a81612369565b946020939093013593505050565b60008060006060848603121561253d57600080fd5b833561254881612369565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b8181101561259557835183529284019291840191600101612579565b50909695505050505050565b600080604083850312156125b457600080fd5b82359150602083013567ffffffffffffffff8111156125d257600080fd5b6125de85828601612434565b9150509250929050565b60005b838110156126035781810151838201526020016125eb565b50506000910152565b600081518084526126248160208601602086016125e8565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b6002811061265e5761265e612638565b9052565b6004811061265e5761265e612638565b60006101608d835280602084015261268c8184018e61260c565b6001600160a01b038d811660408601528c166060850152608084018b905260a084018a905260c0840189905260e0840188905290506126cf61010084018761264e565b6126dd610120840186612662565b8281036101408401526126f0818561260c565b9e9d5050505050505050505050505050565b60208152815160208201526000602083015161016080604085015261272b61018085018361260c565b9150604085015161274760608601826001600160a01b03169052565b5060608501516001600160a01b038116608086015250608085015160a085015260a085015160c085015260c085015160e085015260e085015161010081818701528087015191505061012061279e8187018361264e565b86015190506101406127b286820183612662565b860151858403601f19018387015290506127cc838261260c565b9695505050505050565b805180151581146127e657600080fd5b919050565b6000602082840312156127fd57600080fd5b611265826127d6565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610dca57610dca612806565b60008261285057634e487b7160e01b600052601260045260246000fd5b500490565b600181811c9082168061286957607f821691505b60208210810361205c57634e487b7160e01b600052602260045260246000fd5b601f8211156115d657600081815260208120601f850160051c810160208610156128b05750805b601f850160051c820191505b818110156128cf578281556001016128bc565b505050505050565b815167ffffffffffffffff8111156128f1576128f161239b565b612905816128ff8454612855565b84612889565b602080601f83116001811461293a57600084156129225750858301515b600019600386901b1c1916600185901b1785556128cf565b600085815260208120601f198616915b828110156129695788860151825594840194600190910190840161294a565b50858210156129875787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b82815260408101611265602083018461264e565b6020808252601f908201527f5061796d656e74526f757465723a20496e76616c6964206f7264657220494400604082015260600190565b60208082526022908201527f5061796d656e74526f757465723a205061796d656e74206e6f742070656e64696040820152616e6760f01b606082015260800190565b600060208284031215612a3657600080fd5b5051919050565b81810381811115610dca57610dca612806565b80820180821115610dca57610dca612806565b634e487b7160e01b600052603260045260246000fd5b600060018201612a8b57612a8b612806565b5060010190565b602081526000611265602083018461260c565b80516127e681612369565b600082601f830112612ac157600080fd5b8151612acf6124538261240c565b818152846020838601011115612ae457600080fd5b612af58260208301602087016125e8565b949350505050565b8051600481106127e657600080fd5b600060208284031215612b1e57600080fd5b815167ffffffffffffffff80821115612b3657600080fd5b908301906101408286031215612b4b57600080fd5b612b536123b1565b612b5c83612aa5565b8152602083015182811115612b7057600080fd5b612b7c87828601612ab0565b602083015250604083015182811115612b9457600080fd5b612ba087828601612ab0565b604083015250606083015182811115612bb857600080fd5b612bc487828601612ab0565b606083015250612bd6608084016127d6565b6080820152612be760a084016127d6565b60a082015260c083015160c0820152612c0260e08401612afd565b60e08201526101008381015190820152610120928301519281019290925250939250505056fea264697066735822122019342ff5cea3e88ec0510a5914895780d5b48c9dfedffdfe2c48d6a534a620e364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638da5cb5b11610104578063d290dcfc116100a2578063ef6cf04d11610071578063ef6cf04d146103df578063f160d36914610409578063f2fde38b1461041c578063fcecbb611461042f57600080fd5b8063d290dcfc14610386578063de8f8b3f14610399578063df867859146103ac578063ee5ac03e146103bf57600080fd5b80639aadf60a116100de5780639aadf60a1461033a578063a843c5fe1461034d578063aa0b598814610360578063b9e205ae1461037357600080fd5b80638da5cb5b146102ed5780638eefcf62146102fe57806395ccea671461032757600080fd5b806347ca8a8b11610171578063715018a61161014b578063715018a6146102aa5780638456cb59146102b25780638926e419146102ba5780638d420d13146102cd57600080fd5b806347ca8a8b146102675780634cabb8241461027a5780635c975abb1461028d57600080fd5b806322dcd13e116101ad57806322dcd13e14610230578063237e288a146102395780633f4ba83a1461024c578063469048401461025457600080fd5b8063012beac9146101d4578063155f82e9146102045780631ab154961461021b575b600080fd5b6003546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61020d60045481565b6040519081526020016101fb565b61022e61022936600461237e565b61044f565b005b61020d60065481565b61020d61024736600461248a565b6104f2565b61022e610876565b6007546101e7906001600160a01b031681565b61022e6102753660046124e3565b610888565b61020d6102883660046124e3565b610dac565b600054600160a01b900460ff1660405190151581526020016101fb565b61022e610dd0565b61022e610de2565b61020d6102c83660046124fc565b610df2565b6102e06102db366004612528565b61111a565b6040516101fb919061255d565b6000546001600160a01b03166101e7565b61020d61030c36600461237e565b6001600160a01b03166000908152600a602052604090205490565b61022e6103353660046124fc565b61126c565b61022e6103483660046125a1565b6115dc565b61020d61035b3660046124fc565b61174e565b61022e61036e3660046124e3565b61177f565b61022e6103813660046124e3565b61182b565b6002546101e7906001600160a01b031681565b61022e6103a73660046124e3565b61195c565b6005546101e7906001600160a01b031681565b61020d6103cd36600461237e565b600a6020526000908152604090205481565b6103f26103ed3660046124e3565b611b96565b6040516101fb9b9a99989796959493929190612672565b61022e61041736600461237e565b611d14565b61022e61042a36600461237e565b611de8565b61044261043d3660046124e3565b611e23565b6040516101fb9190612702565b610457612062565b6001600160a01b0381166104d05760405162461bcd60e51b815260206004820152603560248201527f5061796d656e74526f757465723a204658207261746520757064617465722063604482015274616e6e6f74206265207a65726f206164647265737360581b60648201526084015b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60035460405163353f20fd60e01b81526001600160a01b038086166004830152600092869291169063353f20fd90602401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056491906127eb565b6105b05760405162461bcd60e51b815260206004820181905260248201527f5061796d656e74526f757465723a2056656e646f72206e6f742061637469766560448201526064016104c7565b6105b861208f565b6000620f4240600454866105cc919061281c565b6105d69190612833565b9050600081116106285760405162461bcd60e51b815260206004820152601f60248201527f5061796d656e74526f757465723a20416d6f756e7420746f6f20736d616c6c0060448201526064016104c7565b60008451116106895760405162461bcd60e51b815260206004820152602760248201527f5061796d656e74526f757465723a204d657461646174612063616e6e6f7420626044820152666520656d70747960c81b60648201526084016104c7565b6106916120ba565b92506040518061016001604052808481526020016106ae8861212b565b81523360208201526001600160a01b0388166040820152606081018790526080810183905260045460a08201524260c082015260e00160018152602001600081526020908101869052600085815260088252604090208251815590820151600182019061071b90826128d7565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201805460ff1916600183818111156107a1576107a1612638565b021790555061012082015160088201805461ff0019166101008360038111156107cc576107cc612638565b021790555061014082015160098201906107e690826128d7565b5050336000818152600960209081526040808320805460018181018355918552838520018990556001600160a01b038c1680855282852080548084018255908652939094209092018890555191935086917fd1cbe362484d6d80f52e20672fd2e4b5579125af9908612b8bda8199d99f8bd19161086591879190612997565b60405180910390a450509392505050565b61087e612062565b6108866121ad565b565b610890612202565b60008181526008602052604090205481906108bd5760405162461bcd60e51b81526004016104c7906129ab565b6000828152600860205260408120906008820154610100900460ff1660038111156108ea576108ea612638565b146109075760405162461bcd60e51b81526004016104c7906129e2565b60028101546001600160a01b0316331461097a5760405162461bcd60e51b815260206004820152602e60248201527f5061796d656e74526f757465723a204f6e6c792062757965722063616e20636f60448201526d1b5c1b195d19481c185e5b595b9d60921b60648201526084016104c7565b60058101546002546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190612a24565b1015610a4b5760405162461bcd60e51b815260206004820152602960248201527f5061796d656e74526f757465723a20496e73756666696369656e742062555344604482015268432062616c616e636560b81b60648201526084016104c7565b60006127106006548360050154610a62919061281c565b610a6c9190612833565b90506000818360050154610a809190612a3d565b60025460058501546040516323b872dd60e01b815233600482015230602482015260448101919091529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0291906127eb565b610b4e5760405162461bcd60e51b815260206004820152601e60248201527f5061796d656e74526f757465723a205472616e73666572206661696c6564000060448201526064016104c7565b8115610c245760025460075460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb906044016020604051808303816000875af1158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd91906127eb565b610c245760405162461bcd60e51b815260206004820152602260248201527f5061796d656e74526f757465723a20466565207472616e73666572206661696c604482015261195960f21b60648201526084016104c7565b600254600384015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9f91906127eb565b610cf95760405162461bcd60e51b815260206004820152602560248201527f5061796d656e74526f757465723a2056656e646f72207472616e736665722066604482015264185a5b195960da1b60648201526084016104c7565b60088301805461ff00191661010017905560038301546001600160a01b03166000908152600a602052604081208054839290610d36908490612a50565b9091555050600383015460028401546005850154604080519182526020820186905281018490526001600160a01b03928316929091169087907fab776149fc023f3e5cafa5099ef7b7c5a5756789546721c3b359ef4e0f9005d99060600160405180910390a450505050610da960018055565b50565b6000620f424060045483610dc0919061281c565b610dca9190612833565b92915050565b610dd8612062565b610886600061222c565b610dea612062565b61088661227c565b60035460405163353f20fd60e01b81526001600160a01b038085166004830152600092859291169063353f20fd90602401602060405180830381865afa158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6491906127eb565b610eb05760405162461bcd60e51b815260206004820181905260248201527f5061796d656e74526f757465723a2056656e646f72206e6f742061637469766560448201526064016104c7565b610eb861208f565b6000620f424060045485610ecc919061281c565b610ed69190612833565b905060008111610f285760405162461bcd60e51b815260206004820152601f60248201527f5061796d656e74526f757465723a20416d6f756e7420746f6f20736d616c6c0060448201526064016104c7565b610f306120ba565b9250604051806101600160405280848152602001610f4d8761212b565b81523360208201526001600160a01b0387166040820152606081018690526080810183905260045460a08201524260c082015260e0016000815260200160008152604080516020818101835260008083529381019190915286835260088152912082518155908201516001820190610fc590826128d7565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201805460ff19166001838181111561104b5761104b612638565b021790555061012082015160088201805461ff00191661010083600381111561107657611076612638565b0217905550610140820151600982019061109090826128d7565b5050336000818152600960209081526040808320805460018181018355918552838520018990556001600160a01b038b16808552828520805492830181558552928420018890555190935086917fd1cbe362484d6d80f52e20672fd2e4b5579125af9908612b8bda8199d99f8bd19161110a918791612997565b60405180910390a4505092915050565b6001600160a01b038316600090815260096020526040902080546060919084106111925760405162461bcd60e51b815260206004820152602360248201527f5061796d656e74526f757465723a204f6666736574206f7574206f6620626f756044820152626e647360e81b60648201526084016104c7565b600061119e8486612a50565b82549091508111156111ae575080545b60006111ba8683612a3d565b67ffffffffffffffff8111156111d2576111d261239b565b6040519080825280602002602001820160405280156111fb578160200160208202803683370190505b509050855b8281101561125f5783818154811061121a5761121a612a63565b90600052602060002001548288836112329190612a3d565b8151811061124257611242612a63565b60209081029190910101528061125781612a79565b915050611200565b50925050505b9392505050565b611274612062565b6001600160a01b0382166113a357600081156112905781611292565b475b9050600081116112ee5760405162461bcd60e51b815260206004820152602160248201527f5061796d656e74526f757465723a204e6f2045544820746f20776974686472616044820152607760f81b60648201526084016104c7565b600080546040516001600160a01b039091169083908381818185875af1925050503d806000811461133b576040519150601f19603f3d011682016040523d82523d6000602084013e611340565b606091505b505090508061139d5760405162461bcd60e51b8152602060048201526024808201527f5061796d656e74526f757465723a20455448207769746864726177616c2066616044820152631a5b195960e21b60648201526084016104c7565b50505050565b6002546001600160a01b0383811691161461140f5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e74526f757465723a2043616e206f6e6c7920776974686472617760448201526520625553444360d01b60648201526084016104c7565b6000811561141d5781611489565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114899190612a24565b9050600081116114e75760405162461bcd60e51b8152602060048201526024808201527f5061796d656e74526f757465723a204e6f20746f6b656e7320746f20776974686044820152636472617760e01b60648201526084016104c7565b6002546001600160a01b031663a9059cbb61150a6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157b91906127eb565b6115d65760405162461bcd60e51b815260206004820152602660248201527f5061796d656e74526f757465723a20546f6b656e207769746864726177616c2060448201526519985a5b195960d21b60648201526084016104c7565b505b5050565b60008281526008602052604090205482906116095760405162461bcd60e51b81526004016104c7906129ab565b6000838152600860205260408120906008820154610100900460ff16600381111561163657611636612638565b146116535760405162461bcd60e51b81526004016104c7906129e2565b60038101546001600160a01b031633148061167857506000546001600160a01b031633145b6116e35760405162461bcd60e51b815260206004820152603660248201527f5061796d656e74526f757465723a204f6e6c792076656e646f72206f722061646044820152751b5a5b8818d85b881b585c9ac8185cc819985a5b195960521b60648201526084016104c7565b60088101805461ff001916610200179055600381015460028201546040516001600160a01b03928316929091169086907f7a2ea751754fe932d035d5b4731a6eb8f5d1571412b2f691a4440ff6a520a4e290611740908890612a92565b60405180910390a450505050565b6009602052816000526040600020818154811061176a57600080fd5b90600052602060002001600091509150505481565b611787612062565b6103e88111156117e55760405162461bcd60e51b8152602060048201526024808201527f5061796d656e74526f757465723a204665652063616e6e6f74206578636565646044820152632031302560e01b60648201526084016104c7565b600680549082905560408051828152602081018490527fd347e206f25a89b917fc9482f1a2d294d749baa4dc9bde7fb495ee11fe49164391015b60405180910390a15050565b6005546001600160a01b031633148061184e57506000546001600160a01b031633145b6118b85760405162461bcd60e51b815260206004820152603560248201527f5061796d656e74526f757465723a204e6f7420617574686f72697a656420746f604482015274207570646174652065786368616e6765207261746560581b60648201526084016104c7565b6000811161191e5760405162461bcd60e51b815260206004820152602d60248201527f5061796d656e74526f757465723a2045786368616e67652072617465206d757360448201526c7420626520706f73697469766560981b60648201526084016104c7565b600480549082905560408051828152602081018490527fc8d1043f24843c0a1c9251fdc30017d84e87498fbcf232af9f86816b5e182bde910161181f565b611964612062565b60008181526008602052604090205481906119915760405162461bcd60e51b81526004016104c7906129ab565b611999612202565b600082815260086020526040902060016008820154610100900460ff1660038111156119c7576119c7612638565b14611a205760405162461bcd60e51b8152602060048201526024808201527f5061796d656e74526f757465723a205061796d656e74206e6f7420636f6d706c604482015263195d195960e21b60648201526084016104c7565b6005810154600280549083015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa091906127eb565b611afa5760405162461bcd60e51b815260206004820152602560248201527f5061796d656e74526f757465723a20526566756e64207472616e736665722066604482015264185a5b195960da1b60648201526084016104c7565b60088201805461ff00191661030017905560038201546001600160a01b03166000908152600a602052604081208054839290611b37908490612a3d565b9091555050600382015460028301546040518381526001600160a01b03928316929091169086907f42b8ba31338f985ac11f6eaa31356b5cbd8eaa2f7f01e453369f02f1cf234b989060200160405180910390a450506115d860018055565b60086020526000908152604090208054600182018054919291611bb890612855565b80601f0160208091040260200160405190810160405280929190818152602001828054611be490612855565b8015611c315780601f10611c0657610100808354040283529160200191611c31565b820191906000526020600020905b815481529060010190602001808311611c1457829003601f168201915b50505060028401546003850154600486015460058701546006880154600789015460088a015460098b0180549a9b6001600160a01b039889169b97909816995094975092959194909360ff808516946101009004169291611c9190612855565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbd90612855565b8015611d0a5780601f10611cdf57610100808354040283529160200191611d0a565b820191906000526020600020905b815481529060010190602001808311611ced57829003601f168201915b505050505090508b565b611d1c612062565b6001600160a01b038116611d8e5760405162461bcd60e51b815260206004820152603360248201527f5061796d656e74526f757465723a2046656520726563697069656e742063616e6044820152726e6f74206265207a65726f206164647265737360681b60648201526084016104c7565b600780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527faaebcf1bfa00580e41d966056b48521fa9f202645c86d4ddf28113e617c1b1d3910161181f565b611df0612062565b6001600160a01b038116611e1a57604051631e4fbdf760e01b8152600060048201526024016104c7565b610da98161222c565b611e2b6122e9565b6000828152600860205260409020548290611e585760405162461bcd60e51b81526004016104c7906129ab565b600860008481526020019081526020016000206040518061016001604052908160008201548152602001600182018054611e9190612855565b80601f0160208091040260200160405190810160405280929190818152602001828054611ebd90612855565b8015611f0a5780601f10611edf57610100808354040283529160200191611f0a565b820191906000526020600020905b815481529060010190602001808311611eed57829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e09091019060ff166001811115611f7957611f79612638565b6001811115611f8a57611f8a612638565b81526020016008820160019054906101000a900460ff166003811115611fb257611fb2612638565b6003811115611fc357611fc3612638565b8152602001600982018054611fd790612855565b80601f016020809104026020016040519081016040528092919081815260200182805461200390612855565b80156120505780601f1061202557610100808354040283529160200191612050565b820191906000526020600020905b81548152906001019060200180831161203357829003601f168201915b50505050508152505091505b50919050565b6000546001600160a01b031633146108865760405163118cdaa760e01b81523360048201526024016104c7565b600054600160a01b900460ff16156108865760405163d93c066560e01b815260040160405180910390fd5b600b8054600091826120cb83612a79565b9091555050600b5460405161211091429143913391602001938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60405160208183030381529060405280519060200120905090565b600354604051635480df8960e01b81526001600160a01b038381166004830152606092600092911690635480df8990602401600060405180830381865afa15801561217a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121a29190810190612b0c565b602001519392505050565b6121b56122bf565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60026001540361222557604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61228461208f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121e53390565b600054600160a01b900460ff1661088657604051638dfc202b60e01b815260040160405180910390fd5b604051806101600160405280600080191681526020016060815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000600181111561235557612355612638565b815260200160008152602001606081525090565b6001600160a01b0381168114610da957600080fd5b60006020828403121561239057600080fd5b813561126581612369565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156123d5576123d561239b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156124045761240461239b565b604052919050565b600067ffffffffffffffff8211156124265761242661239b565b50601f01601f191660200190565b600082601f83011261244557600080fd5b81356124586124538261240c565b6123db565b81815284602083860101111561246d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561249f57600080fd5b83356124aa81612369565b925060208401359150604084013567ffffffffffffffff8111156124cd57600080fd5b6124d986828701612434565b9150509250925092565b6000602082840312156124f557600080fd5b5035919050565b6000806040838503121561250f57600080fd5b823561251a81612369565b946020939093013593505050565b60008060006060848603121561253d57600080fd5b833561254881612369565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b8181101561259557835183529284019291840191600101612579565b50909695505050505050565b600080604083850312156125b457600080fd5b82359150602083013567ffffffffffffffff8111156125d257600080fd5b6125de85828601612434565b9150509250929050565b60005b838110156126035781810151838201526020016125eb565b50506000910152565b600081518084526126248160208601602086016125e8565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b6002811061265e5761265e612638565b9052565b6004811061265e5761265e612638565b60006101608d835280602084015261268c8184018e61260c565b6001600160a01b038d811660408601528c166060850152608084018b905260a084018a905260c0840189905260e0840188905290506126cf61010084018761264e565b6126dd610120840186612662565b8281036101408401526126f0818561260c565b9e9d5050505050505050505050505050565b60208152815160208201526000602083015161016080604085015261272b61018085018361260c565b9150604085015161274760608601826001600160a01b03169052565b5060608501516001600160a01b038116608086015250608085015160a085015260a085015160c085015260c085015160e085015260e085015161010081818701528087015191505061012061279e8187018361264e565b86015190506101406127b286820183612662565b860151858403601f19018387015290506127cc838261260c565b9695505050505050565b805180151581146127e657600080fd5b919050565b6000602082840312156127fd57600080fd5b611265826127d6565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610dca57610dca612806565b60008261285057634e487b7160e01b600052601260045260246000fd5b500490565b600181811c9082168061286957607f821691505b60208210810361205c57634e487b7160e01b600052602260045260246000fd5b601f8211156115d657600081815260208120601f850160051c810160208610156128b05750805b601f850160051c820191505b818110156128cf578281556001016128bc565b505050505050565b815167ffffffffffffffff8111156128f1576128f161239b565b612905816128ff8454612855565b84612889565b602080601f83116001811461293a57600084156129225750858301515b600019600386901b1c1916600185901b1785556128cf565b600085815260208120601f198616915b828110156129695788860151825594840194600190910190840161294a565b50858210156129875787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b82815260408101611265602083018461264e565b6020808252601f908201527f5061796d656e74526f757465723a20496e76616c6964206f7264657220494400604082015260600190565b60208082526022908201527f5061796d656e74526f757465723a205061796d656e74206e6f742070656e64696040820152616e6760f01b606082015260800190565b600060208284031215612a3657600080fd5b5051919050565b81810381811115610dca57610dca612806565b80820180821115610dca57610dca612806565b634e487b7160e01b600052603260045260246000fd5b600060018201612a8b57612a8b612806565b5060010190565b602081526000611265602083018461260c565b80516127e681612369565b600082601f830112612ac157600080fd5b8151612acf6124538261240c565b818152846020838601011115612ae457600080fd5b612af58260208301602087016125e8565b949350505050565b8051600481106127e657600080fd5b600060208284031215612b1e57600080fd5b815167ffffffffffffffff80821115612b3657600080fd5b908301906101408286031215612b4b57600080fd5b612b536123b1565b612b5c83612aa5565b8152602083015182811115612b7057600080fd5b612b7c87828601612ab0565b602083015250604083015182811115612b9457600080fd5b612ba087828601612ab0565b604083015250606083015182811115612bb857600080fd5b612bc487828601612ab0565b606083015250612bd6608084016127d6565b6080820152612be760a084016127d6565b60a082015260c083015160c0820152612c0260e08401612afd565b60e08201526101008381015190820152610120928301519281019290925250939250505056fea264697066735822122019342ff5cea3e88ec0510a5914895780d5b48c9dfedffdfe2c48d6a534a620e364736f6c63430008140033",
  "devdoc": {
    "details": "Handles bUSDC payments between buyers and vendors Supports Quick Pay (amount only) and Invoice Pay (with metadata) Emits Receipt events for transaction tracking",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "calculateUSDCAmount(uint256)": {
        "details": "Calculate amount in USDC from GHS",
        "params": {
          "amountGHS": "Amount in GHS"
        },
        "returns": {
          "amountUSDC": "Amount in bUSDC"
        }
      },
      "completePayment(bytes32)": {
        "details": "Complete a payment by transferring bUSDC tokens",
        "params": {
          "orderId": "Order ID to complete"
        }
      },
      "emergencyWithdraw(address,uint256)": {
        "details": "Emergency withdraw (admin only)",
        "params": {
          "amount": "Amount to withdraw (0 for all)",
          "token": "Token address to withdraw (0 for ETH)"
        }
      },
      "getReceipt(bytes32)": {
        "details": "Get receipt by order ID",
        "params": {
          "orderId": "Order ID to query"
        },
        "returns": {
          "receipt": "Receipt struct"
        }
      },
      "getUserReceipts(address,uint256,uint256)": {
        "details": "Get user's receipt IDs",
        "params": {
          "limit": "Maximum number of receipts to return",
          "offset": "Starting index",
          "user": "User address"
        },
        "returns": {
          "orderIds": "Array of order IDs"
        }
      },
      "getVendorEarnings(address)": {
        "details": "Get vendor's total earnings",
        "params": {
          "vendor": "Vendor address"
        },
        "returns": {
          "earnings": "Total earnings in bUSDC"
        }
      },
      "initiateInvoicePay(address,uint256,string)": {
        "details": "Initiate an Invoice Pay transaction with metadata",
        "params": {
          "amountGHS": "Amount in GHS",
          "metadata": "JSON string with invoice details",
          "vendor": "Vendor's address"
        },
        "returns": {
          "orderId": "Generated order ID"
        }
      },
      "initiateQuickPay(address,uint256)": {
        "details": "Initiate a Quick Pay transaction",
        "params": {
          "amountGHS": "Amount in GHS",
          "vendor": "Vendor's address"
        },
        "returns": {
          "orderId": "Generated order ID"
        }
      },
      "markPaymentFailed(bytes32,string)": {
        "details": "Mark a payment as failed (admin or vendor only)",
        "params": {
          "orderId": "Order ID to mark as failed",
          "reason": "Reason for failure"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause the contract (admin only)"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "refundPayment(bytes32)": {
        "details": "Refund a completed payment (admin only)",
        "params": {
          "orderId": "Order ID to refund"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the contract (admin only)"
      },
      "updateExchangeRate(uint256)": {
        "details": "Update exchange rate (GHS to USDC)",
        "params": {
          "newRate": "New exchange rate (6 decimals)"
        }
      },
      "updateFeeRecipient(address)": {
        "details": "Update fee recipient",
        "params": {
          "newRecipient": "New fee recipient address"
        }
      },
      "updateFxRateUpdater(address)": {
        "details": "Update FX rate updater address",
        "params": {
          "newUpdater": "New FX rate updater address"
        }
      },
      "updatePlatformFee(uint256)": {
        "details": "Update platform fee",
        "params": {
          "newFeeBps": "New fee in basis points (100 = 1%)"
        }
      }
    },
    "title": "PaymentRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 942,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1052,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2016,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "busdcToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(bUSDC)5106"
      },
      {
        "astId": 2019,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "vendorRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(VendorRegistry)4829"
      },
      {
        "astId": 2022,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "currentFxRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2024,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "fxRateUpdater",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2027,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "platformFeeBps",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2029,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2034,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "receipts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Receipt)2013_storage)"
      },
      {
        "astId": 2039,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "userReceipts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 2043,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "vendorEarnings",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2046,
        "contract": "contracts/PaymentRouter.sol:PaymentRouter",
        "label": "orderCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VendorRegistry)4829": {
        "encoding": "inplace",
        "label": "contract VendorRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(bUSDC)5106": {
        "encoding": "inplace",
        "label": "contract bUSDC",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentStatus)1988": {
        "encoding": "inplace",
        "label": "enum PaymentRouter.PaymentStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PaymentType)1983": {
        "encoding": "inplace",
        "label": "enum PaymentRouter.PaymentType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Receipt)2013_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PaymentRouter.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)2013_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Receipt)2013_storage": {
        "encoding": "inplace",
        "label": "struct PaymentRouter.Receipt",
        "members": [
          {
            "astId": 1990,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1992,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "vendorENS",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1994,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "buyer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1996,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "vendor",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1998,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "amountGHS",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2000,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "amountUSDC",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2002,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "fxRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2004,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "timestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2007,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "paymentType",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(PaymentType)1983"
          },
          {
            "astId": 2010,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "status",
            "offset": 1,
            "slot": "8",
            "type": "t_enum(PaymentStatus)1988"
          },
          {
            "astId": 2012,
            "contract": "contracts/PaymentRouter.sol:PaymentRouter",
            "label": "metadata",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}