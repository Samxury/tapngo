{
  "address": "0x23E3d0017A282f48bF80dE2A6E670f57be2C9152",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vendorRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxGasPerTransaction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxGasPerDay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxGasPerMonth",
          "type": "uint256"
        }
      ],
      "name": "GasLimitsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasUsed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCost",
          "type": "uint256"
        }
      ],
      "name": "GasSponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymasterDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymasterWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "UserWhitelisted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAY_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MONTH_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasToUse",
          "type": "uint256"
        }
      ],
      "name": "canPerformTransaction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canPerform",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxGasPerTransaction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxGasPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxGasPerMonth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymasterBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserGasUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dailyUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monthlyUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monthlyLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "name": "postOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "setWhitelistedUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxGasPerTransaction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxGasPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxGasPerMonth",
          "type": "uint256"
        }
      ],
      "name": "updateGasLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userGasUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dailyUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monthlyUsage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDailyReset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMonthlyReset",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxCost",
          "type": "uint256"
        }
      ],
      "name": "validatePaymasterUserOp",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vendorRegistry",
      "outputs": [
        {
          "internalType": "contract VendorRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xac436047aaf61edfe40754558684917fce4484d8c089af720dad02d96d4f03e5",
  "receipt": {
    "to": null,
    "from": "0xBab2d51d46042098690a9767339d7603C9F737C1",
    "contractAddress": "0x23E3d0017A282f48bF80dE2A6E670f57be2C9152",
    "transactionIndex": 12,
    "gasUsed": "1472111",
    "logsBloom": "0x
    "blockHash": "0x0f05513d04e9176b9246c90f4ef31ec1d250253afa94bb9e921454610406b5f0",
    "transactionHash": "0xac436047aaf61edfe40754558684917fce4484d8c089af720dad02d96d4f03e5",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 30637635,
        "transactionHash": "0xac436047aaf61edfe40754558684917fce4484d8c089af720dad02d96d4f03e5",
        "address": "0x23E3d0017A282f48bF80dE2A6E670f57be2C9152",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bab2d51d46042098690a9767339d7603c9f737c1"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0x0f05513d04e9176b9246c90f4ef31ec1d250253afa94bb9e921454610406b5f0"
      }
    ],
    "blockNumber": 30637635,
    "cumulativeGasUsed": "4086909",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA9F04F020CF9F511982719196E25FE7c666c9E4D",
    "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
  ],
  "numDeployments": 1,
  "solcInputHash": "1e7f658a624141603997a4c1dbf9231d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vendorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxGasPerTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxGasPerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxGasPerMonth\",\"type\":\"uint256\"}],\"name\":\"GasLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"name\":\"GasSponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymasterDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymasterWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"UserWhitelisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasToUse\",\"type\":\"uint256\"}],\"name\":\"canPerformTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canPerform\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxGasPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPerMonth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymasterBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserGasUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dailyUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxGasPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPerMonth\",\"type\":\"uint256\"}],\"name\":\"updateGasLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGasUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dailyUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDailyReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMonthlyReset\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vendorRegistry\",\"outputs\":[{\"internalType\":\"contract VendorRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"ERC-4337 Paymaster for sponsoring gas fees for verified users and vendors Implements gasless transactions for Tap&Go Pay users\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"canPerformTransaction(address,uint256)\":{\"details\":\"Check if user can perform a transaction with given gas\",\"params\":{\"gasToUse\":\"Gas that will be used\",\"user\":\"User address\"},\"returns\":{\"canPerform\":\"True if user can perform the transaction\"}},\"deposit()\":{\"details\":\"Deposit ETH to the paymaster for gas sponsorship\"},\"emergencyWithdraw()\":{\"details\":\"Emergency withdraw all funds (admin only)\"},\"getPaymasterBalance()\":{\"details\":\"Get paymaster balance in EntryPoint\",\"returns\":{\"balance\":\"Paymaster balance\"}},\"getUserGasUsage(address)\":{\"details\":\"Get user's current gas usage\",\"params\":{\"user\":\"User address\"},\"returns\":{\"dailyLimit\":\"Daily gas limit\",\"dailyUsage\":\"Gas used today\",\"monthlyLimit\":\"Monthly gas limit\",\"monthlyUsage\":\"Gas used this month\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the paymaster (admin only)\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"postOp(bytes,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"details\":\"Post-operation callback (called after transaction execution)\",\"params\":{\"actualGasCost\":\"Actual gas cost of the transaction\",\"context\":\"Context data from validatePaymasterUserOp\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setWhitelistedUser(address,bool)\":{\"details\":\"Whitelist/unwhitelist a user for unlimited gas\",\"params\":{\"user\":\"User address\",\"whitelisted\":\"Whether to whitelist the user\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the paymaster (admin only)\"},\"updateGasLimits(uint256,uint256,uint256)\":{\"details\":\"Update gas limits (admin only)\",\"params\":{\"maxGasPerDay\":\"Maximum gas per day per user\",\"maxGasPerMonth\":\"Maximum gas per month per user\",\"maxGasPerTransaction\":\"Maximum gas per transaction\"}},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"details\":\"Validate a user operation and sponsor gas if eligible This is called by the EntryPoint during transaction validation\",\"params\":{\"maxCost\":\"Maximum cost the paymaster is willing to pay\",\"userOp\":\"User operation to validate\",\"userOpHash\":\"Hash of the user operation\"},\"returns\":{\"context\":\"Context data for post-operation\",\"validationData\":\"Validation data (0 = success)\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw ETH from the paymaster\",\"params\":{\"amount\":\"Amount to withdraw\"}}},\"title\":\"Paymaster\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paymaster.sol\":\"Paymaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/Paymaster.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./VendorRegistry.sol\\\";\\r\\n\\r\\n// UserOperation structure (ERC-4337)\\r\\nstruct UserOperation {\\r\\n    address sender;\\r\\n    uint256 nonce;\\r\\n    bytes initCode;\\r\\n    bytes callData;\\r\\n    uint256 callGasLimit;\\r\\n    uint256 verificationGasLimit;\\r\\n    uint256 preVerificationGas;\\r\\n    uint256 maxFeePerGas;\\r\\n    uint256 maxPriorityFeePerGas;\\r\\n    bytes paymasterAndData;\\r\\n    bytes signature;\\r\\n}\\r\\n\\r\\n// ERC-4337 interfaces (simplified for Base Sepolia)\\r\\ninterface IEntryPoint {\\r\\n    function getSenderAddress(bytes memory initCode) external;\\r\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\r\\n    function depositTo(address account) external payable;\\r\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\r\\n}\\r\\n\\r\\ninterface IAccount {\\r\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds) external returns (uint256 validationData);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Paymaster\\r\\n * @dev ERC-4337 Paymaster for sponsoring gas fees for verified users and vendors\\r\\n * Implements gasless transactions for Tap&Go Pay users\\r\\n */\\r\\ncontract Paymaster is Ownable, Pausable, ReentrancyGuard {\\r\\n    \\r\\n    // Gas sponsorship limits\\r\\n    struct GasLimits {\\r\\n        uint256 maxGasPerTransaction;    // Maximum gas per transaction\\r\\n        uint256 maxGasPerDay;           // Maximum gas per day per user\\r\\n        uint256 maxGasPerMonth;         // Maximum gas per month per user\\r\\n    }\\r\\n    \\r\\n    // User gas usage tracking\\r\\n    struct UserGasUsage {\\r\\n        uint256 dailyUsage;             // Gas used today\\r\\n        uint256 monthlyUsage;           // Gas used this month\\r\\n        uint256 lastDailyReset;         // Last daily reset timestamp\\r\\n        uint256 lastMonthlyReset;       // Last monthly reset timestamp\\r\\n        bool isWhitelisted;             // Whether user is whitelisted for unlimited gas\\r\\n    }\\r\\n    \\r\\n    // State variables\\r\\n    VendorRegistry public vendorRegistry;\\r\\n    IEntryPoint public entryPoint;\\r\\n    \\r\\n    // Gas limits\\r\\n    GasLimits public gasLimits;\\r\\n    \\r\\n    // User tracking\\r\\n    mapping(address => UserGasUsage) public userGasUsage;\\r\\n    mapping(address => bool) public whitelistedUsers; // Users with unlimited gas\\r\\n    \\r\\n    // Daily and monthly limits\\r\\n    uint256 public constant DAY_IN_SECONDS = 86400;\\r\\n    uint256 public constant MONTH_IN_SECONDS = 2592000; // 30 days\\r\\n    \\r\\n    // Events\\r\\n    event GasSponsored(\\r\\n        address indexed user,\\r\\n        uint256 gasUsed,\\r\\n        uint256 gasPrice,\\r\\n        uint256 totalCost\\r\\n    );\\r\\n    \\r\\n    event GasLimitsUpdated(\\r\\n        uint256 maxGasPerTransaction,\\r\\n        uint256 maxGasPerDay,\\r\\n        uint256 maxGasPerMonth\\r\\n    );\\r\\n    \\r\\n    event UserWhitelisted(address indexed user, bool whitelisted);\\r\\n    event PaymasterDeposited(uint256 amount);\\r\\n    event PaymasterWithdrawn(uint256 amount);\\r\\n    \\r\\n    // Modifiers\\r\\n    modifier onlyEntryPoint() {\\r\\n        require(msg.sender == address(entryPoint), \\\"Paymaster: Only EntryPoint can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner(), \\\"Paymaster: Only admin can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(\\r\\n        address _vendorRegistry,\\r\\n        address _entryPoint\\r\\n    ) Ownable(msg.sender) {\\r\\n        vendorRegistry = VendorRegistry(_vendorRegistry);\\r\\n        entryPoint = IEntryPoint(_entryPoint);\\r\\n        \\r\\n        // Set default gas limits\\r\\n        gasLimits = GasLimits({\\r\\n            maxGasPerTransaction: 500000,  // 500k gas per transaction\\r\\n            maxGasPerDay: 2000000,         // 2M gas per day\\r\\n            maxGasPerMonth: 50000000       // 50M gas per month\\r\\n        });\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Validate a user operation and sponsor gas if eligible\\r\\n     * This is called by the EntryPoint during transaction validation\\r\\n     * @param userOp User operation to validate\\r\\n     * @param userOpHash Hash of the user operation\\r\\n     * @param maxCost Maximum cost the paymaster is willing to pay\\r\\n     * @return context Context data for post-operation\\r\\n     * @return validationData Validation data (0 = success)\\r\\n     */\\r\\n    function validatePaymasterUserOp(\\r\\n        UserOperation calldata userOp,\\r\\n        bytes32 userOpHash,\\r\\n        uint256 maxCost\\r\\n    ) external onlyEntryPoint whenNotPaused returns (bytes memory context, uint256 validationData) {\\r\\n        address sender = userOp.sender;\\r\\n        \\r\\n        // Check if user is eligible for gas sponsorship\\r\\n        if (!_isEligibleForGasSponsorship(sender)) {\\r\\n            return (\\\"\\\", 1); // Reject the operation\\r\\n        }\\r\\n        \\r\\n        // Check gas limits\\r\\n        if (!_checkGasLimits(sender, userOp.callGasLimit)) {\\r\\n            return (\\\"\\\", 1); // Reject the operation\\r\\n        }\\r\\n        \\r\\n        // Check if paymaster has sufficient balance\\r\\n        if (address(this).balance < maxCost) {\\r\\n            return (\\\"\\\", 1); // Reject the operation\\r\\n        }\\r\\n        \\r\\n        // Return success with context\\r\\n        context = abi.encode(sender, maxCost);\\r\\n        validationData = 0; // Success\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Post-operation callback (called after transaction execution)\\r\\n     * @param context Context data from validatePaymasterUserOp\\r\\n     * @param actualGasCost Actual gas cost of the transaction\\r\\n     */\\r\\n    function postOp(\\r\\n        bytes calldata context,\\r\\n        UserOperation calldata userOp,\\r\\n        bytes32 userOpHash,\\r\\n        uint256 actualGasCost\\r\\n    ) external onlyEntryPoint {\\r\\n        (address sender, uint256 maxCost) = abi.decode(context, (address, uint256));\\r\\n        \\r\\n        // Update user gas usage\\r\\n        _updateUserGasUsage(sender, actualGasCost);\\r\\n        \\r\\n        // Emit event\\r\\n        emit GasSponsored(sender, actualGasCost, userOp.maxFeePerGas, actualGasCost);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if a user is eligible for gas sponsorship\\r\\n     * @param user User address to check\\r\\n     * @return eligible True if user is eligible\\r\\n     */\\r\\n    function _isEligibleForGasSponsorship(address user) internal view returns (bool eligible) {\\r\\n        // Whitelisted users get unlimited gas\\r\\n        if (whitelistedUsers[user]) {\\r\\n            return true;\\r\\n        }\\r\\n        \\r\\n        // Check if user is a registered vendor\\r\\n        if (vendorRegistry.isVendor(user)) {\\r\\n            return true;\\r\\n        }\\r\\n        \\r\\n        // For now, allow all users (can be restricted later)\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if user's gas usage is within limits\\r\\n     * @param user User address\\r\\n     * @param gasToUse Gas that will be used\\r\\n     * @return withinLimits True if within limits\\r\\n     */\\r\\n    function _checkGasLimits(address user, uint256 gasToUse) internal view returns (bool withinLimits) {\\r\\n        // Whitelisted users have no limits\\r\\n        if (whitelistedUsers[user]) {\\r\\n            return true;\\r\\n        }\\r\\n        \\r\\n        // Check transaction gas limit\\r\\n        if (gasToUse > gasLimits.maxGasPerTransaction) {\\r\\n            return false;\\r\\n        }\\r\\n        \\r\\n        UserGasUsage memory usage = userGasUsage[user];\\r\\n        \\r\\n        // Reset daily usage if needed\\r\\n        if (block.timestamp >= usage.lastDailyReset + DAY_IN_SECONDS) {\\r\\n            usage.dailyUsage = 0;\\r\\n        }\\r\\n        \\r\\n        // Reset monthly usage if needed\\r\\n        if (block.timestamp >= usage.lastMonthlyReset + MONTH_IN_SECONDS) {\\r\\n            usage.monthlyUsage = 0;\\r\\n        }\\r\\n        \\r\\n        // Check daily limit\\r\\n        if (usage.dailyUsage + gasToUse > gasLimits.maxGasPerDay) {\\r\\n            return false;\\r\\n        }\\r\\n        \\r\\n        // Check monthly limit\\r\\n        if (usage.monthlyUsage + gasToUse > gasLimits.maxGasPerMonth) {\\r\\n            return false;\\r\\n        }\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update user's gas usage tracking\\r\\n     * @param user User address\\r\\n     * @param gasUsed Gas used in the transaction\\r\\n     */\\r\\n    function _updateUserGasUsage(address user, uint256 gasUsed) internal {\\r\\n        UserGasUsage storage usage = userGasUsage[user];\\r\\n        \\r\\n        // Reset daily usage if needed\\r\\n        if (block.timestamp >= usage.lastDailyReset + DAY_IN_SECONDS) {\\r\\n            usage.dailyUsage = 0;\\r\\n            usage.lastDailyReset = block.timestamp;\\r\\n        }\\r\\n        \\r\\n        // Reset monthly usage if needed\\r\\n        if (block.timestamp >= usage.lastMonthlyReset + MONTH_IN_SECONDS) {\\r\\n            usage.monthlyUsage = 0;\\r\\n            usage.lastMonthlyReset = block.timestamp;\\r\\n        }\\r\\n        \\r\\n        // Update usage\\r\\n        usage.dailyUsage += gasUsed;\\r\\n        usage.monthlyUsage += gasUsed;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Deposit ETH to the paymaster for gas sponsorship\\r\\n     */\\r\\n    function deposit() external payable onlyAdmin {\\r\\n        require(msg.value > 0, \\\"Paymaster: Deposit amount must be positive\\\");\\r\\n        \\r\\n        // Deposit to EntryPoint\\r\\n        entryPoint.depositTo{value: msg.value}(address(this));\\r\\n        \\r\\n        emit PaymasterDeposited(msg.value);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Withdraw ETH from the paymaster\\r\\n     * @param amount Amount to withdraw\\r\\n     */\\r\\n    function withdraw(uint256 amount) external onlyAdmin nonReentrant {\\r\\n        require(amount > 0, \\\"Paymaster: Withdraw amount must be positive\\\");\\r\\n        require(amount <= address(this).balance, \\\"Paymaster: Insufficient balance\\\");\\r\\n        \\r\\n        // Withdraw from EntryPoint\\r\\n        entryPoint.withdrawTo(payable(owner()), amount);\\r\\n        \\r\\n        emit PaymasterWithdrawn(amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update gas limits (admin only)\\r\\n     * @param maxGasPerTransaction Maximum gas per transaction\\r\\n     * @param maxGasPerDay Maximum gas per day per user\\r\\n     * @param maxGasPerMonth Maximum gas per month per user\\r\\n     */\\r\\n    function updateGasLimits(\\r\\n        uint256 maxGasPerTransaction,\\r\\n        uint256 maxGasPerDay,\\r\\n        uint256 maxGasPerMonth\\r\\n    ) external onlyAdmin {\\r\\n        require(maxGasPerTransaction > 0, \\\"Paymaster: Max gas per transaction must be positive\\\");\\r\\n        require(maxGasPerDay > 0, \\\"Paymaster: Max gas per day must be positive\\\");\\r\\n        require(maxGasPerMonth > 0, \\\"Paymaster: Max gas per month must be positive\\\");\\r\\n        \\r\\n        gasLimits = GasLimits({\\r\\n            maxGasPerTransaction: maxGasPerTransaction,\\r\\n            maxGasPerDay: maxGasPerDay,\\r\\n            maxGasPerMonth: maxGasPerMonth\\r\\n        });\\r\\n        \\r\\n        emit GasLimitsUpdated(maxGasPerTransaction, maxGasPerDay, maxGasPerMonth);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Whitelist/unwhitelist a user for unlimited gas\\r\\n     * @param user User address\\r\\n     * @param whitelisted Whether to whitelist the user\\r\\n     */\\r\\n    function setWhitelistedUser(address user, bool whitelisted) external onlyAdmin {\\r\\n        require(user != address(0), \\\"Paymaster: User address cannot be zero\\\");\\r\\n        \\r\\n        whitelistedUsers[user] = whitelisted;\\r\\n        userGasUsage[user].isWhitelisted = whitelisted;\\r\\n        \\r\\n        emit UserWhitelisted(user, whitelisted);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get user's current gas usage\\r\\n     * @param user User address\\r\\n     * @return dailyUsage Gas used today\\r\\n     * @return monthlyUsage Gas used this month\\r\\n     * @return dailyLimit Daily gas limit\\r\\n     * @return monthlyLimit Monthly gas limit\\r\\n     */\\r\\n    function getUserGasUsage(address user) external view returns (\\r\\n        uint256 dailyUsage,\\r\\n        uint256 monthlyUsage,\\r\\n        uint256 dailyLimit,\\r\\n        uint256 monthlyLimit\\r\\n    ) {\\r\\n        UserGasUsage memory usage = userGasUsage[user];\\r\\n        \\r\\n        // Reset daily usage if needed\\r\\n        if (block.timestamp >= usage.lastDailyReset + DAY_IN_SECONDS) {\\r\\n            usage.dailyUsage = 0;\\r\\n        }\\r\\n        \\r\\n        // Reset monthly usage if needed\\r\\n        if (block.timestamp >= usage.lastMonthlyReset + MONTH_IN_SECONDS) {\\r\\n            usage.monthlyUsage = 0;\\r\\n        }\\r\\n        \\r\\n        return (\\r\\n            usage.dailyUsage,\\r\\n            usage.monthlyUsage,\\r\\n            gasLimits.maxGasPerDay,\\r\\n            gasLimits.maxGasPerMonth\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if user can perform a transaction with given gas\\r\\n     * @param user User address\\r\\n     * @param gasToUse Gas that will be used\\r\\n     * @return canPerform True if user can perform the transaction\\r\\n     */\\r\\n    function canPerformTransaction(address user, uint256 gasToUse) external view returns (bool canPerform) {\\r\\n        return _isEligibleForGasSponsorship(user) && _checkGasLimits(user, gasToUse);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get paymaster balance in EntryPoint\\r\\n     * @return balance Paymaster balance\\r\\n     */\\r\\n    function getPaymasterBalance() external view returns (uint256 balance) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pause the paymaster (admin only)\\r\\n     */\\r\\n    function pause() external onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Unpause the paymaster (admin only)\\r\\n     */\\r\\n    function unpause() external onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Emergency withdraw all funds (admin only)\\r\\n     */\\r\\n    function emergencyWithdraw() external onlyAdmin nonReentrant {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"Paymaster: No funds to withdraw\\\");\\r\\n        \\r\\n        entryPoint.withdrawTo(payable(owner()), balance);\\r\\n        \\r\\n        emit PaymasterWithdrawn(balance);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Receive function to accept ETH deposits\\r\\n     */\\r\\n    receive() external payable {\\r\\n        // Automatically deposit to EntryPoint\\r\\n        if (msg.value > 0) {\\r\\n            entryPoint.depositTo{value: msg.value}(address(this));\\r\\n            emit PaymasterDeposited(msg.value);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa405a3e72a6fce0ca80bad6833ac52bc51fe94f3553df7ed364cdd20ecaebc0\",\"license\":\"MIT\"},\"contracts/VendorRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title VendorRegistry\\r\\n * @dev Registry for managing vendor profiles and verification status\\r\\n * Stores vendor information including ENS names, phone verification, EFP verification, and EFPas scores\\r\\n */\\r\\ncontract VendorRegistry is Ownable, Pausable {\\r\\n    // Vendor status enum\\r\\n    enum VendorStatus {\\r\\n        Pending,    // 0 - Vendor registered but not approved\\r\\n        Active,     // 1 - Vendor approved and active\\r\\n        Suspended,  // 2 - Vendor suspended by admin\\r\\n        Rejected    // 3 - Vendor registration rejected\\r\\n    }\\r\\n    \\r\\n    // Vendor profile structure\\r\\n    struct VendorProfile {\\r\\n        address wallet;           // Vendor's wallet address\\r\\n        string ensName;          // ENS subname (e.g., \\\"business.tapngo.eth\\\")\\r\\n        string businessName;     // Business display name\\r\\n        string phoneHash;        // Hashed phone number for verification\\r\\n        bool phoneVerified;      // Phone verification status\\r\\n        bool efpVerified;        // Ethereum Follow Protocol verification\\r\\n        uint256 efpasScore;      // EFPas reputation score (0 if not available)\\r\\n        VendorStatus status;     // Current vendor status\\r\\n        uint256 registrationTime; // Timestamp of registration\\r\\n        uint256 lastUpdated;     // Timestamp of last profile update\\r\\n    }\\r\\n    \\r\\n    // State variables\\r\\n    mapping(address => VendorProfile) public vendors;\\r\\n    mapping(string => address) public ensToVendor; // ENS name -> vendor address\\r\\n    mapping(string => bool) public usedPhoneHashes; // Track used phone hashes\\r\\n    address[] public vendorAddresses; // Array of all vendor addresses\\r\\n    \\r\\n    // Verification requirements\\r\\n    bool public requirePhoneVerification = true;\\r\\n    bool public requireEFPVerification = true;\\r\\n    uint256 public minEFPasScore = 0; // Minimum EFPas score required (0 = not required)\\r\\n    \\r\\n    // Events\\r\\n    event VendorRegistered(\\r\\n        address indexed vendor,\\r\\n        string ensName,\\r\\n        string businessName,\\r\\n        string phoneHash\\r\\n    );\\r\\n    \\r\\n    event VendorApproved(address indexed vendor, string ensName);\\r\\n    event VendorSuspended(address indexed vendor, string reason);\\r\\n    event VendorRejected(address indexed vendor, string reason);\\r\\n    event VendorUpdated(address indexed vendor, string field);\\r\\n    event PhoneVerified(address indexed vendor, string phoneHash);\\r\\n    event EFPVerified(address indexed vendor, bool verified);\\r\\n    event EFPasScoreUpdated(address indexed vendor, uint256 score);\\r\\n    \\r\\n    // Modifiers\\r\\n    modifier onlyVendor() {\\r\\n        require(vendors[msg.sender].wallet != address(0), \\\"VendorRegistry: Not a registered vendor\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyActiveVendor() {\\r\\n        require(\\r\\n            vendors[msg.sender].wallet != address(0) && \\r\\n            vendors[msg.sender].status == VendorStatus.Active,\\r\\n            \\\"VendorRegistry: Not an active vendor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner(), \\\"VendorRegistry: Only admin can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor() Ownable(msg.sender) {}\\r\\n    \\r\\n    /**\\r\\n     * @dev Register a new vendor\\r\\n     * @param ensName ENS subname for the vendor (e.g., \\\"business.tapngo.eth\\\")\\r\\n     * @param businessName Display name of the business\\r\\n     * @param phoneHash Hashed phone number\\r\\n     */\\r\\n    function registerVendor(\\r\\n        string memory ensName,\\r\\n        string memory businessName,\\r\\n        string memory phoneHash\\r\\n    ) external whenNotPaused {\\r\\n        require(vendors[msg.sender].wallet == address(0), \\\"VendorRegistry: Vendor already registered\\\");\\r\\n        require(bytes(ensName).length > 0, \\\"VendorRegistry: ENS name cannot be empty\\\");\\r\\n        require(bytes(businessName).length > 0, \\\"VendorRegistry: Business name cannot be empty\\\");\\r\\n        require(bytes(phoneHash).length > 0, \\\"VendorRegistry: Phone hash cannot be empty\\\");\\r\\n        require(ensToVendor[ensName] == address(0), \\\"VendorRegistry: ENS name already taken\\\");\\r\\n        require(!usedPhoneHashes[phoneHash], \\\"VendorRegistry: Phone number already used\\\");\\r\\n        \\r\\n        // Create vendor profile\\r\\n        VendorProfile memory newVendor = VendorProfile({\\r\\n            wallet: msg.sender,\\r\\n            ensName: ensName,\\r\\n            businessName: businessName,\\r\\n            phoneHash: phoneHash,\\r\\n            phoneVerified: false,\\r\\n            efpVerified: false,\\r\\n            efpasScore: 0,\\r\\n            status: VendorStatus.Pending,\\r\\n            registrationTime: block.timestamp,\\r\\n            lastUpdated: block.timestamp\\r\\n        });\\r\\n        \\r\\n        vendors[msg.sender] = newVendor;\\r\\n        ensToVendor[ensName] = msg.sender;\\r\\n        usedPhoneHashes[phoneHash] = true;\\r\\n        vendorAddresses.push(msg.sender);\\r\\n        \\r\\n        emit VendorRegistered(msg.sender, ensName, businessName, phoneHash);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Approve a vendor (admin only)\\r\\n     * @param vendorAddress Address of the vendor to approve\\r\\n     */\\r\\n    function approveVendor(address vendorAddress) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Pending, \\\"VendorRegistry: Vendor not pending\\\");\\r\\n        \\r\\n        // Check verification requirements\\r\\n        if (requirePhoneVerification) {\\r\\n            require(vendors[vendorAddress].phoneVerified, \\\"VendorRegistry: Phone verification required\\\");\\r\\n        }\\r\\n        if (requireEFPVerification) {\\r\\n            require(vendors[vendorAddress].efpVerified, \\\"VendorRegistry: EFP verification required\\\");\\r\\n        }\\r\\n        if (minEFPasScore > 0) {\\r\\n            require(vendors[vendorAddress].efpasScore >= minEFPasScore, \\\"VendorRegistry: EFPas score too low\\\");\\r\\n        }\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Active;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorApproved(vendorAddress, vendors[vendorAddress].ensName);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Suspend a vendor (admin only)\\r\\n     * @param vendorAddress Address of the vendor to suspend\\r\\n     * @param reason Reason for suspension\\r\\n     */\\r\\n    function suspendVendor(address vendorAddress, string memory reason) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Active, \\\"VendorRegistry: Vendor not active\\\");\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Suspended;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorSuspended(vendorAddress, reason);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Reject a vendor registration (admin only)\\r\\n     * @param vendorAddress Address of the vendor to reject\\r\\n     * @param reason Reason for rejection\\r\\n     */\\r\\n    function rejectVendor(address vendorAddress, string memory reason) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        require(vendors[vendorAddress].status == VendorStatus.Pending, \\\"VendorRegistry: Vendor not pending\\\");\\r\\n        \\r\\n        vendors[vendorAddress].status = VendorStatus.Rejected;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorRejected(vendorAddress, reason);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's phone verification status (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param verified Verification status\\r\\n     */\\r\\n    function updatePhoneVerification(address vendorAddress, bool verified) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].phoneVerified = verified;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit PhoneVerified(vendorAddress, vendors[vendorAddress].phoneHash);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's EFP verification status (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param verified Verification status\\r\\n     */\\r\\n    function updateEFPVerification(address vendorAddress, bool verified) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].efpVerified = verified;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit EFPVerified(vendorAddress, verified);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update vendor's EFPas score (admin only)\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @param score EFPas reputation score\\r\\n     */\\r\\n    function updateEFPasScore(address vendorAddress, uint256 score) external onlyAdmin {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        \\r\\n        vendors[vendorAddress].efpasScore = score;\\r\\n        vendors[vendorAddress].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit EFPasScoreUpdated(vendorAddress, score);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update business name (vendor only)\\r\\n     * @param newBusinessName New business name\\r\\n     */\\r\\n    function updateBusinessName(string memory newBusinessName) external onlyVendor {\\r\\n        require(bytes(newBusinessName).length > 0, \\\"VendorRegistry: Business name cannot be empty\\\");\\r\\n        \\r\\n        vendors[msg.sender].businessName = newBusinessName;\\r\\n        vendors[msg.sender].lastUpdated = block.timestamp;\\r\\n        \\r\\n        emit VendorUpdated(msg.sender, \\\"businessName\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get vendor profile by address\\r\\n     * @param vendorAddress Address of the vendor\\r\\n     * @return profile Vendor profile struct\\r\\n     */\\r\\n    function getVendorProfile(address vendorAddress) external view returns (VendorProfile memory profile) {\\r\\n        require(vendors[vendorAddress].wallet != address(0), \\\"VendorRegistry: Vendor not found\\\");\\r\\n        return vendors[vendorAddress];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get vendor address by ENS name\\r\\n     * @param ensName ENS name to look up\\r\\n     * @return vendorAddress Address of the vendor\\r\\n     */\\r\\n    function getVendorByENS(string memory ensName) external view returns (address vendorAddress) {\\r\\n        return ensToVendor[ensName];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if an address is a registered vendor\\r\\n     * @param vendorAddress Address to check\\r\\n     * @return isRegistered True if address is a registered vendor\\r\\n     */\\r\\n    function isVendor(address vendorAddress) external view returns (bool isRegistered) {\\r\\n        return vendors[vendorAddress].wallet != address(0);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if a vendor is active\\r\\n     * @param vendorAddress Address to check\\r\\n     * @return isActive True if vendor is active\\r\\n     */\\r\\n    function isActiveVendor(address vendorAddress) external view returns (bool isActive) {\\r\\n        return vendors[vendorAddress].wallet != address(0) && \\r\\n               vendors[vendorAddress].status == VendorStatus.Active;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get total number of registered vendors\\r\\n     * @return count Total number of vendors\\r\\n     */\\r\\n    function getVendorCount() external view returns (uint256 count) {\\r\\n        return vendorAddresses.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all vendor addresses (for pagination)\\r\\n     * @param offset Starting index\\r\\n     * @param limit Maximum number of addresses to return\\r\\n     * @return addresses Array of vendor addresses\\r\\n     */\\r\\n    function getVendorAddresses(uint256 offset, uint256 limit) external view returns (address[] memory addresses) {\\r\\n        require(offset < vendorAddresses.length, \\\"VendorRegistry: Offset out of bounds\\\");\\r\\n        \\r\\n        uint256 end = offset + limit;\\r\\n        if (end > vendorAddresses.length) {\\r\\n            end = vendorAddresses.length;\\r\\n        }\\r\\n        \\r\\n        address[] memory result = new address[](end - offset);\\r\\n        for (uint256 i = offset; i < end; i++) {\\r\\n            result[i - offset] = vendorAddresses[i];\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update verification requirements (admin only)\\r\\n     * @param phoneRequired Whether phone verification is required\\r\\n     * @param efpRequired Whether EFP verification is required\\r\\n     * @param minScore Minimum EFPas score required\\r\\n     */\\r\\n    function updateVerificationRequirements(\\r\\n        bool phoneRequired,\\r\\n        bool efpRequired,\\r\\n        uint256 minScore\\r\\n    ) external onlyAdmin {\\r\\n        requirePhoneVerification = phoneRequired;\\r\\n        requireEFPVerification = efpRequired;\\r\\n        minEFPasScore = minScore;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pause the contract (admin only)\\r\\n     */\\r\\n    function pause() external onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Unpause the contract (admin only)\\r\\n     */\\r\\n    function unpause() external onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd489b176a6aaa264ba089ce8665709ea750694f864c54727aefa5aa8f5d6497a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200183c3803806200183c83398101604081905262000034916200013e565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006681620000d1565b5060018055600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055604080516060810182526207a120808252621e8480602083018190526302faf0809290930182905260045560059190915560065562000176565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013957600080fd5b919050565b600080604083850312156200015257600080fd5b6200015d8362000121565b91506200016d6020840162000121565b90509250929050565b6116b680620001866000396000f3fe6080604052600436106101445760003560e01c8063715018a6116100b6578063ce339e9b1161006f578063ce339e9b14610490578063d0e30db0146104b0578063db2e21bc146104b8578063f2fde38b146104cd578063f465c77e146104ed578063f621cc481461051b57600080fd5b8063715018a6146103f15780637171225c1461040657806375bf37d01461041d5780638456cb591461043d5780638da5cb5b14610452578063b0d691fe1461047057600080fd5b806344710fbe1161010857806344710fbe146102f557806359ff6fb2146103155780635c76dffd146103555780635c975abb1461038f5780635fdc6281146103ba5780636b9f4500146103d157600080fd5b8063012beac9146101ef578063200ccb7d1461022c5780632e1a7d4d146102495780633f4ba83a14610269578063435af2921461027e57600080fd5b366101ea5734156101e85760035460405163b760faf960e01b81523060048201526001600160a01b039091169063b760faf99034906024016000604051808303818588803b15801561019557600080fd5b505af11580156101a9573d6000803e3d6000fd5b50505050507fc241c47cb6187e949afb9bdc167dd3b683184721f0b372a8005acb4ae2085567346040516101df91815260200190565b60405180910390a15b005b600080fd5b3480156101fb57600080fd5b5060025461020f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023857600080fd5b50475b604051908152602001610223565b34801561025557600080fd5b506101e8610264366004611352565b61054b565b34801561027557600080fd5b506101e8610702565b34801561028a57600080fd5b506102cb610299366004611380565b600760205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a001610223565b34801561030157600080fd5b506101e86103103660046113b2565b610736565b34801561032157600080fd5b50610335610330366004611380565b610838565b604080519485526020850193909352918301526060820152608001610223565b34801561036157600080fd5b5060045460055460065461037492919083565b60408051938452602084019290925290820152606001610223565b34801561039b57600080fd5b50600054600160a01b900460ff165b6040519015158152602001610223565b3480156103c657600080fd5b5061023b6201518081565b3480156103dd57600080fd5b506103aa6103ec3660046113eb565b6108ec565b3480156103fd57600080fd5b506101e8610911565b34801561041257600080fd5b5061023b62278d0081565b34801561042957600080fd5b506101e8610438366004611430565b610923565b34801561044957600080fd5b506101e86109c2565b34801561045e57600080fd5b506000546001600160a01b031661020f565b34801561047c57600080fd5b5060035461020f906001600160a01b031681565b34801561049c57600080fd5b506101e86104ab3660046114d6565b6109f4565b6101e8610bc0565b3480156104c457600080fd5b506101e8610ce7565b3480156104d957600080fd5b506101e86104e8366004611380565b610e2d565b3480156104f957600080fd5b5061050d610508366004611502565b610e68565b604051610223929190611550565b34801561052757600080fd5b506103aa610536366004611380565b60086020526000908152604090205460ff1681565b6000546001600160a01b0316331461057e5760405162461bcd60e51b8152600401610575906115a5565b60405180910390fd5b610586610f61565b600081116105ea5760405162461bcd60e51b815260206004820152602b60248201527f5061796d61737465723a20576974686472617720616d6f756e74206d7573742060448201526a626520706f73697469766560a81b6064820152608401610575565b4781111561063a5760405162461bcd60e51b815260206004820152601f60248201527f5061796d61737465723a20496e73756666696369656e742062616c616e6365006044820152606401610575565b6003546001600160a01b031663205c287861065d6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b1580156106a557600080fd5b505af11580156106b9573d6000803e3d6000fd5b505050507f4e5c5553c1fb209937cafb45cafeb706ac79d452dc03aa36bde24435d067f1a8816040516106ee91815260200190565b60405180910390a16106ff60018055565b50565b6000546001600160a01b0316331461072c5760405162461bcd60e51b8152600401610575906115a5565b610734610f8b565b565b6000546001600160a01b031633146107605760405162461bcd60e51b8152600401610575906115a5565b6001600160a01b0382166107c55760405162461bcd60e51b815260206004820152602660248201527f5061796d61737465723a205573657220616464726573732063616e6e6f74206260448201526565207a65726f60d01b6064820152608401610575565b6001600160a01b0382166000818152600860209081526040808320805486151560ff199182168117909255600784529382902060040180549094168117909355519182527f995d2434d36c9bceaab42c56efe51e8ffe41fd11cabefd9e2cb83700d8b2035e910160405180910390a25050565b6001600160a01b0381166000908152600760209081526040808320815160a081018352815481526001820154938101939093526002810154918301829052600381015460608401526004015460ff1615156080830152829182918291906108a39062015180906115f1565b42106108ae57600081525b62278d0081606001516108c191906115f1565b42106108cf57600060208201525b805160209091015160055460065492989197509550909350915050565b60006108f783610fdb565b801561090857506109088383611087565b90505b92915050565b6109196111a1565b61073460006111ce565b6003546001600160a01b0316331461094d5760405162461bcd60e51b815260040161057590611612565b60008061095c868801886113eb565b9150915061096a828461121e565b6040805184815260e087013560208201529081018490526001600160a01b038316907f30dd8e34b1b28eeb3c9c8247aed3881e51399dd61dc9e4eefb09acf1b6f0d0ff9060600160405180910390a250505050505050565b6000546001600160a01b031633146109ec5760405162461bcd60e51b8152600401610575906115a5565b6107346112ba565b6000546001600160a01b03163314610a1e5760405162461bcd60e51b8152600401610575906115a5565b60008311610a8a5760405162461bcd60e51b815260206004820152603360248201527f5061796d61737465723a204d61782067617320706572207472616e73616374696044820152726f6e206d75737420626520706f73697469766560681b6064820152608401610575565b60008211610aee5760405162461bcd60e51b815260206004820152602b60248201527f5061796d61737465723a204d6178206761732070657220646179206d7573742060448201526a626520706f73697469766560a81b6064820152608401610575565b60008111610b545760405162461bcd60e51b815260206004820152602d60248201527f5061796d61737465723a204d61782067617320706572206d6f6e7468206d757360448201526c7420626520706f73697469766560981b6064820152608401610575565b6040805160608082018352858252602080830186905291830184905260048690556005859055600684905582518681529182018590529181018390527f4d946b3d58f77ca131abbc724ae9f8c84f43648c091e02a9b730260cb4e6bff5910160405180910390a1505050565b6000546001600160a01b03163314610bea5760405162461bcd60e51b8152600401610575906115a5565b60003411610c4d5760405162461bcd60e51b815260206004820152602a60248201527f5061796d61737465723a204465706f73697420616d6f756e74206d75737420626044820152696520706f73697469766560b01b6064820152608401610575565b60035460405163b760faf960e01b81523060048201526001600160a01b039091169063b760faf99034906024016000604051808303818588803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50505050507fc241c47cb6187e949afb9bdc167dd3b683184721f0b372a8005acb4ae208556734604051610cdd91815260200190565b60405180910390a1565b6000546001600160a01b03163314610d115760405162461bcd60e51b8152600401610575906115a5565b610d19610f61565b4780610d675760405162461bcd60e51b815260206004820152601f60248201527f5061796d61737465723a204e6f2066756e647320746f207769746864726177006044820152606401610575565b6003546001600160a01b031663205c2878610d8a6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050507f4e5c5553c1fb209937cafb45cafeb706ac79d452dc03aa36bde24435d067f1a881604051610e1b91815260200190565b60405180910390a15061073460018055565b610e356111a1565b6001600160a01b038116610e5f57604051631e4fbdf760e01b815260006004820152602401610575565b6106ff816111ce565b6003546060906000906001600160a01b03163314610e985760405162461bcd60e51b815260040161057590611612565b610ea06112fd565b6000610eaf6020870187611380565b9050610eba81610fdb565b610ed857505060408051602081019091526000815290506001610f59565b610ee6818760800135611087565b610f0457505060408051602081019091526000815290506001610f59565b83471015610f2657505060408051602081019091526000815290506001610f59565b604080516001600160a01b0383166020820152908101859052606001604051602081830303815290604052925060009150505b935093915050565b600260015403610f8457604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b610f93611328565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610cdd565b6001600160a01b03811660009081526008602052604081205460ff161561100457506001919050565b60025460405163ee54d54f60e01b81526001600160a01b0384811660048301529091169063ee54d54f90602401602060405180830381865afa15801561104e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110729190611663565b1561107f57506001919050565b506001919050565b6001600160a01b03821660009081526008602052604081205460ff16156110b05750600161090b565b6004548211156110c25750600061090b565b6001600160a01b038316600090815260076020908152604091829020825160a081018452815481526001820154928101929092526002810154928201839052600381015460608301526004015460ff1615156080820152906111289062015180906115f1565b421061113357600081525b62278d00816060015161114691906115f1565b421061115457600060208201525b60055481516111649085906115f1565b111561117457600091505061090b565b60065460208201516111879085906115f1565b111561119757600091505061090b565b5060019392505050565b6000546001600160a01b031633146107345760405163118cdaa760e01b8152336004820152602401610575565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216600090815260076020526040902060028101546112499062015180906115f1565b421061125a57600081554260028201555b62278d00816003015461126d91906115f1565b421061128157600060018201554260038201555b8181600001600082825461129591906115f1565b92505081905550818160010160008282546112b091906115f1565b9091555050505050565b6112c26112fd565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610fc33390565b600054600160a01b900460ff16156107345760405163d93c066560e01b815260040160405180910390fd5b600054600160a01b900460ff1661073457604051638dfc202b60e01b815260040160405180910390fd5b60006020828403121561136457600080fd5b5035919050565b6001600160a01b03811681146106ff57600080fd5b60006020828403121561139257600080fd5b813561139d8161136b565b9392505050565b80151581146106ff57600080fd5b600080604083850312156113c557600080fd5b82356113d08161136b565b915060208301356113e0816113a4565b809150509250929050565b600080604083850312156113fe57600080fd5b82356114098161136b565b946020939093013593505050565b6000610160828403121561142a57600080fd5b50919050565b60008060008060006080868803121561144857600080fd5b853567ffffffffffffffff8082111561146057600080fd5b818801915088601f83011261147457600080fd5b81358181111561148357600080fd5b89602082850101111561149557600080fd5b6020928301975095509087013590808211156114b057600080fd5b506114bd88828901611417565b9598949750949560408101359550606001359392505050565b6000806000606084860312156114eb57600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561151757600080fd5b833567ffffffffffffffff81111561152e57600080fd5b61153a86828701611417565b9660208601359650604090950135949350505050565b604081526000835180604084015260005b8181101561157e5760208187018101516060868401015201611561565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b6020808252602c908201527f5061796d61737465723a204f6e6c792061646d696e2063616e2063616c6c207460408201526b3434b990333ab731ba34b7b760a11b606082015260800190565b8082018082111561090b57634e487b7160e01b600052601160045260246000fd5b60208082526031908201527f5061796d61737465723a204f6e6c7920456e747279506f696e742063616e206360408201527030b636103a3434b990333ab731ba34b7b760791b606082015260800190565b60006020828403121561167557600080fd5b815161139d816113a456fea2646970667358221220bcec9b287da8920cf7fb538e56bc8badd1047cc455b290bd8ee1f8527f5205ef64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c8063715018a6116100b6578063ce339e9b1161006f578063ce339e9b14610490578063d0e30db0146104b0578063db2e21bc146104b8578063f2fde38b146104cd578063f465c77e146104ed578063f621cc481461051b57600080fd5b8063715018a6146103f15780637171225c1461040657806375bf37d01461041d5780638456cb591461043d5780638da5cb5b14610452578063b0d691fe1461047057600080fd5b806344710fbe1161010857806344710fbe146102f557806359ff6fb2146103155780635c76dffd146103555780635c975abb1461038f5780635fdc6281146103ba5780636b9f4500146103d157600080fd5b8063012beac9146101ef578063200ccb7d1461022c5780632e1a7d4d146102495780633f4ba83a14610269578063435af2921461027e57600080fd5b366101ea5734156101e85760035460405163b760faf960e01b81523060048201526001600160a01b039091169063b760faf99034906024016000604051808303818588803b15801561019557600080fd5b505af11580156101a9573d6000803e3d6000fd5b50505050507fc241c47cb6187e949afb9bdc167dd3b683184721f0b372a8005acb4ae2085567346040516101df91815260200190565b60405180910390a15b005b600080fd5b3480156101fb57600080fd5b5060025461020f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023857600080fd5b50475b604051908152602001610223565b34801561025557600080fd5b506101e8610264366004611352565b61054b565b34801561027557600080fd5b506101e8610702565b34801561028a57600080fd5b506102cb610299366004611380565b600760205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a001610223565b34801561030157600080fd5b506101e86103103660046113b2565b610736565b34801561032157600080fd5b50610335610330366004611380565b610838565b604080519485526020850193909352918301526060820152608001610223565b34801561036157600080fd5b5060045460055460065461037492919083565b60408051938452602084019290925290820152606001610223565b34801561039b57600080fd5b50600054600160a01b900460ff165b6040519015158152602001610223565b3480156103c657600080fd5b5061023b6201518081565b3480156103dd57600080fd5b506103aa6103ec3660046113eb565b6108ec565b3480156103fd57600080fd5b506101e8610911565b34801561041257600080fd5b5061023b62278d0081565b34801561042957600080fd5b506101e8610438366004611430565b610923565b34801561044957600080fd5b506101e86109c2565b34801561045e57600080fd5b506000546001600160a01b031661020f565b34801561047c57600080fd5b5060035461020f906001600160a01b031681565b34801561049c57600080fd5b506101e86104ab3660046114d6565b6109f4565b6101e8610bc0565b3480156104c457600080fd5b506101e8610ce7565b3480156104d957600080fd5b506101e86104e8366004611380565b610e2d565b3480156104f957600080fd5b5061050d610508366004611502565b610e68565b604051610223929190611550565b34801561052757600080fd5b506103aa610536366004611380565b60086020526000908152604090205460ff1681565b6000546001600160a01b0316331461057e5760405162461bcd60e51b8152600401610575906115a5565b60405180910390fd5b610586610f61565b600081116105ea5760405162461bcd60e51b815260206004820152602b60248201527f5061796d61737465723a20576974686472617720616d6f756e74206d7573742060448201526a626520706f73697469766560a81b6064820152608401610575565b4781111561063a5760405162461bcd60e51b815260206004820152601f60248201527f5061796d61737465723a20496e73756666696369656e742062616c616e6365006044820152606401610575565b6003546001600160a01b031663205c287861065d6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b1580156106a557600080fd5b505af11580156106b9573d6000803e3d6000fd5b505050507f4e5c5553c1fb209937cafb45cafeb706ac79d452dc03aa36bde24435d067f1a8816040516106ee91815260200190565b60405180910390a16106ff60018055565b50565b6000546001600160a01b0316331461072c5760405162461bcd60e51b8152600401610575906115a5565b610734610f8b565b565b6000546001600160a01b031633146107605760405162461bcd60e51b8152600401610575906115a5565b6001600160a01b0382166107c55760405162461bcd60e51b815260206004820152602660248201527f5061796d61737465723a205573657220616464726573732063616e6e6f74206260448201526565207a65726f60d01b6064820152608401610575565b6001600160a01b0382166000818152600860209081526040808320805486151560ff199182168117909255600784529382902060040180549094168117909355519182527f995d2434d36c9bceaab42c56efe51e8ffe41fd11cabefd9e2cb83700d8b2035e910160405180910390a25050565b6001600160a01b0381166000908152600760209081526040808320815160a081018352815481526001820154938101939093526002810154918301829052600381015460608401526004015460ff1615156080830152829182918291906108a39062015180906115f1565b42106108ae57600081525b62278d0081606001516108c191906115f1565b42106108cf57600060208201525b805160209091015160055460065492989197509550909350915050565b60006108f783610fdb565b801561090857506109088383611087565b90505b92915050565b6109196111a1565b61073460006111ce565b6003546001600160a01b0316331461094d5760405162461bcd60e51b815260040161057590611612565b60008061095c868801886113eb565b9150915061096a828461121e565b6040805184815260e087013560208201529081018490526001600160a01b038316907f30dd8e34b1b28eeb3c9c8247aed3881e51399dd61dc9e4eefb09acf1b6f0d0ff9060600160405180910390a250505050505050565b6000546001600160a01b031633146109ec5760405162461bcd60e51b8152600401610575906115a5565b6107346112ba565b6000546001600160a01b03163314610a1e5760405162461bcd60e51b8152600401610575906115a5565b60008311610a8a5760405162461bcd60e51b815260206004820152603360248201527f5061796d61737465723a204d61782067617320706572207472616e73616374696044820152726f6e206d75737420626520706f73697469766560681b6064820152608401610575565b60008211610aee5760405162461bcd60e51b815260206004820152602b60248201527f5061796d61737465723a204d6178206761732070657220646179206d7573742060448201526a626520706f73697469766560a81b6064820152608401610575565b60008111610b545760405162461bcd60e51b815260206004820152602d60248201527f5061796d61737465723a204d61782067617320706572206d6f6e7468206d757360448201526c7420626520706f73697469766560981b6064820152608401610575565b6040805160608082018352858252602080830186905291830184905260048690556005859055600684905582518681529182018590529181018390527f4d946b3d58f77ca131abbc724ae9f8c84f43648c091e02a9b730260cb4e6bff5910160405180910390a1505050565b6000546001600160a01b03163314610bea5760405162461bcd60e51b8152600401610575906115a5565b60003411610c4d5760405162461bcd60e51b815260206004820152602a60248201527f5061796d61737465723a204465706f73697420616d6f756e74206d75737420626044820152696520706f73697469766560b01b6064820152608401610575565b60035460405163b760faf960e01b81523060048201526001600160a01b039091169063b760faf99034906024016000604051808303818588803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50505050507fc241c47cb6187e949afb9bdc167dd3b683184721f0b372a8005acb4ae208556734604051610cdd91815260200190565b60405180910390a1565b6000546001600160a01b03163314610d115760405162461bcd60e51b8152600401610575906115a5565b610d19610f61565b4780610d675760405162461bcd60e51b815260206004820152601f60248201527f5061796d61737465723a204e6f2066756e647320746f207769746864726177006044820152606401610575565b6003546001600160a01b031663205c2878610d8a6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050507f4e5c5553c1fb209937cafb45cafeb706ac79d452dc03aa36bde24435d067f1a881604051610e1b91815260200190565b60405180910390a15061073460018055565b610e356111a1565b6001600160a01b038116610e5f57604051631e4fbdf760e01b815260006004820152602401610575565b6106ff816111ce565b6003546060906000906001600160a01b03163314610e985760405162461bcd60e51b815260040161057590611612565b610ea06112fd565b6000610eaf6020870187611380565b9050610eba81610fdb565b610ed857505060408051602081019091526000815290506001610f59565b610ee6818760800135611087565b610f0457505060408051602081019091526000815290506001610f59565b83471015610f2657505060408051602081019091526000815290506001610f59565b604080516001600160a01b0383166020820152908101859052606001604051602081830303815290604052925060009150505b935093915050565b600260015403610f8457604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b610f93611328565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610cdd565b6001600160a01b03811660009081526008602052604081205460ff161561100457506001919050565b60025460405163ee54d54f60e01b81526001600160a01b0384811660048301529091169063ee54d54f90602401602060405180830381865afa15801561104e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110729190611663565b1561107f57506001919050565b506001919050565b6001600160a01b03821660009081526008602052604081205460ff16156110b05750600161090b565b6004548211156110c25750600061090b565b6001600160a01b038316600090815260076020908152604091829020825160a081018452815481526001820154928101929092526002810154928201839052600381015460608301526004015460ff1615156080820152906111289062015180906115f1565b421061113357600081525b62278d00816060015161114691906115f1565b421061115457600060208201525b60055481516111649085906115f1565b111561117457600091505061090b565b60065460208201516111879085906115f1565b111561119757600091505061090b565b5060019392505050565b6000546001600160a01b031633146107345760405163118cdaa760e01b8152336004820152602401610575565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216600090815260076020526040902060028101546112499062015180906115f1565b421061125a57600081554260028201555b62278d00816003015461126d91906115f1565b421061128157600060018201554260038201555b8181600001600082825461129591906115f1565b92505081905550818160010160008282546112b091906115f1565b9091555050505050565b6112c26112fd565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610fc33390565b600054600160a01b900460ff16156107345760405163d93c066560e01b815260040160405180910390fd5b600054600160a01b900460ff1661073457604051638dfc202b60e01b815260040160405180910390fd5b60006020828403121561136457600080fd5b5035919050565b6001600160a01b03811681146106ff57600080fd5b60006020828403121561139257600080fd5b813561139d8161136b565b9392505050565b80151581146106ff57600080fd5b600080604083850312156113c557600080fd5b82356113d08161136b565b915060208301356113e0816113a4565b809150509250929050565b600080604083850312156113fe57600080fd5b82356114098161136b565b946020939093013593505050565b6000610160828403121561142a57600080fd5b50919050565b60008060008060006080868803121561144857600080fd5b853567ffffffffffffffff8082111561146057600080fd5b818801915088601f83011261147457600080fd5b81358181111561148357600080fd5b89602082850101111561149557600080fd5b6020928301975095509087013590808211156114b057600080fd5b506114bd88828901611417565b9598949750949560408101359550606001359392505050565b6000806000606084860312156114eb57600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561151757600080fd5b833567ffffffffffffffff81111561152e57600080fd5b61153a86828701611417565b9660208601359650604090950135949350505050565b604081526000835180604084015260005b8181101561157e5760208187018101516060868401015201611561565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b6020808252602c908201527f5061796d61737465723a204f6e6c792061646d696e2063616e2063616c6c207460408201526b3434b990333ab731ba34b7b760a11b606082015260800190565b8082018082111561090b57634e487b7160e01b600052601160045260246000fd5b60208082526031908201527f5061796d61737465723a204f6e6c7920456e747279506f696e742063616e206360408201527030b636103a3434b990333ab731ba34b7b760791b606082015260800190565b60006020828403121561167557600080fd5b815161139d816113a456fea2646970667358221220bcec9b287da8920cf7fb538e56bc8badd1047cc455b290bd8ee1f8527f5205ef64736f6c63430008140033",
  "devdoc": {
    "details": "ERC-4337 Paymaster for sponsoring gas fees for verified users and vendors Implements gasless transactions for Tap&Go Pay users",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "canPerformTransaction(address,uint256)": {
        "details": "Check if user can perform a transaction with given gas",
        "params": {
          "gasToUse": "Gas that will be used",
          "user": "User address"
        },
        "returns": {
          "canPerform": "True if user can perform the transaction"
        }
      },
      "deposit()": {
        "details": "Deposit ETH to the paymaster for gas sponsorship"
      },
      "emergencyWithdraw()": {
        "details": "Emergency withdraw all funds (admin only)"
      },
      "getPaymasterBalance()": {
        "details": "Get paymaster balance in EntryPoint",
        "returns": {
          "balance": "Paymaster balance"
        }
      },
      "getUserGasUsage(address)": {
        "details": "Get user's current gas usage",
        "params": {
          "user": "User address"
        },
        "returns": {
          "dailyLimit": "Daily gas limit",
          "dailyUsage": "Gas used today",
          "monthlyLimit": "Monthly gas limit",
          "monthlyUsage": "Gas used this month"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause the paymaster (admin only)"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "postOp(bytes,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
        "details": "Post-operation callback (called after transaction execution)",
        "params": {
          "actualGasCost": "Actual gas cost of the transaction",
          "context": "Context data from validatePaymasterUserOp"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setWhitelistedUser(address,bool)": {
        "details": "Whitelist/unwhitelist a user for unlimited gas",
        "params": {
          "user": "User address",
          "whitelisted": "Whether to whitelist the user"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the paymaster (admin only)"
      },
      "updateGasLimits(uint256,uint256,uint256)": {
        "details": "Update gas limits (admin only)",
        "params": {
          "maxGasPerDay": "Maximum gas per day per user",
          "maxGasPerMonth": "Maximum gas per month per user",
          "maxGasPerTransaction": "Maximum gas per transaction"
        }
      },
      "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
        "details": "Validate a user operation and sponsor gas if eligible This is called by the EntryPoint during transaction validation",
        "params": {
          "maxCost": "Maximum cost the paymaster is willing to pay",
          "userOp": "User operation to validate",
          "userOpHash": "Hash of the user operation"
        },
        "returns": {
          "context": "Context data for post-operation",
          "validationData": "Validation data (0 = success)"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw ETH from the paymaster",
        "params": {
          "amount": "Amount to withdraw"
        }
      }
    },
    "title": "Paymaster",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Paymaster.sol:Paymaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 942,
        "contract": "contracts/Paymaster.sol:Paymaster",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1052,
        "contract": "contracts/Paymaster.sol:Paymaster",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1207,
        "contract": "contracts/Paymaster.sol:Paymaster",
        "label": "vendorRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(VendorRegistry)4829"
      },
      {
        "astId": 1210,
        "contract": "contracts/Paymaster.sol:Paymaster",
        "label": "entryPoint",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IEntryPoint)1166"
      },
      {
        "astId": 1213,
        "contract": "contracts/Paymaster.sol:Paymaster",
        "label": "gasLimits",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(GasLimits)1193_storage"
      },
      {
        "astId": 1218,
        "contract": "contracts/Paymaster.sol:Paymaster",
        "label": "userGasUsage",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserGasUsage)1204_storage)"
      },
      {
        "astId": 1222,
        "contract": "contracts/Paymaster.sol:Paymaster",
        "label": "whitelistedUsers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IEntryPoint)1166": {
        "encoding": "inplace",
        "label": "contract IEntryPoint",
        "numberOfBytes": "20"
      },
      "t_contract(VendorRegistry)4829": {
        "encoding": "inplace",
        "label": "contract VendorRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserGasUsage)1204_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Paymaster.UserGasUsage)",
        "numberOfBytes": "32",
        "value": "t_struct(UserGasUsage)1204_storage"
      },
      "t_struct(GasLimits)1193_storage": {
        "encoding": "inplace",
        "label": "struct Paymaster.GasLimits",
        "members": [
          {
            "astId": 1188,
            "contract": "contracts/Paymaster.sol:Paymaster",
            "label": "maxGasPerTransaction",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1190,
            "contract": "contracts/Paymaster.sol:Paymaster",
            "label": "maxGasPerDay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1192,
            "contract": "contracts/Paymaster.sol:Paymaster",
            "label": "maxGasPerMonth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserGasUsage)1204_storage": {
        "encoding": "inplace",
        "label": "struct Paymaster.UserGasUsage",
        "members": [
          {
            "astId": 1195,
            "contract": "contracts/Paymaster.sol:Paymaster",
            "label": "dailyUsage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1197,
            "contract": "contracts/Paymaster.sol:Paymaster",
            "label": "monthlyUsage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1199,
            "contract": "contracts/Paymaster.sol:Paymaster",
            "label": "lastDailyReset",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1201,
            "contract": "contracts/Paymaster.sol:Paymaster",
            "label": "lastMonthlyReset",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1203,
            "contract": "contracts/Paymaster.sol:Paymaster",
            "label": "isWhitelisted",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}